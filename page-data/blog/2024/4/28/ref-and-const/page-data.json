{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2024/4/28/ref-and-const/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3 id=\"문제의-상황\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%83%81%ED%99%A9\" aria-label=\"문제의 상황 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제의 상황</h3>\n<p>테이블 내, 체크박스가 존재한다.<br>\n체크박스에 체크를 한 뒤, Done 버튼을 클릭하면, DB에 해당 체크박스 데이터가 저장된다.<br>\n단, 체크박스 중 <strong>상태가 변경된 체크박스만</strong> 서버로 전달해야한다.</p>\n<p>예를 들어, 다음과 같은 Log가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 초기 initial</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"0\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"1\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"2\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// rowSelection state</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"0\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"2\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"3\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우엔, row.id 중 1번, 3번을 서버로 전달해야한다.<br>\n1번은 체크가 해지되었고, 3번은 체크가 추가되었기 때문이다.</p>\n<br/>\n<p>여기서 문제는, ‘초기 initial 상태를 어디에 저장할 것인가?‘이다.<br>\n나는 초기값이 변경되면 안된다고 생각해서, useRef를 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// app/page.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tableList <span class=\"token operator\">=</span> <span class=\"token function\">useTableDataGetQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    searchCondition<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tableList<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>h-screen w-screen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mx-auto w-[900px] pb-20 pt-10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TableComponents</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tableList<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고, <code class=\"language-text\">TableComponents</code>에서 다음과 같이 작성해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// app/components/TableComponents.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> TableComponents<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>TableComponentsProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialRowSelectionRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> RowSelectionState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">createRowSelection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rowSelection<span class=\"token punctuation\">,</span> setRowSelection<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> toggleMutation <span class=\"token operator\">=</span> <span class=\"token function\">useToggleMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// useEffect를 통해, tanstack-query로 받아온 서버상태와 TableComponents 상태를 동기화한다.</span>\n    <span class=\"token keyword\">const</span> newRowSelection <span class=\"token operator\">=</span> <span class=\"token function\">createRowSelection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setRowSelection</span><span class=\"token punctuation\">(</span>newRowSelection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'ref'</span><span class=\"token punctuation\">,</span>\n    initialRowSelectionRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'rowSelection'</span><span class=\"token punctuation\">,</span>\n    rowSelection<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tanstack-table에서 체크박스에 대한 설명은 <a href=\"https://geuni620.github.io/blog/2023/12/2/tanstack-table/#2-%EC%A0%84%EC%B2%B4-%ED%85%8C%EC%9D%B4%EB%B8%94-row-%EB%8B%A8%EC%9C%84-%EC%B2%B4%ED%81%AC%EB%B0%95%EC%8A%A4\" target=\"_blank\" rel=\"nofollow\">다른 글</a>에서 다루었다. 🍀</p>\n<br/>\n<p>다음과 같은 동작을 예상했다.</p>\n<ol>\n<li>서버로부터 data를 받아온다.</li>\n<li><code class=\"language-text\">initialRowSelectionRef</code>에 <code class=\"language-text\">createRowSelection(data)</code>를 저장한다.</li>\n<li><code class=\"language-text\">rowSelection</code>에 <code class=\"language-text\">createRowSelection(data)</code>를 저장한다.<br>\n(이 때, <code class=\"language-text\">rowSelection</code>은 <code class=\"language-text\">initialRowSelectionRef</code>와 동일한 값을 가진다.)</li>\n<li>체크박스를 클릭하면, <code class=\"language-text\">rowSelection</code>이 변경된다.</li>\n<li>Done 버튼을 클릭하면, <code class=\"language-text\">rowSelection</code>과 <code class=\"language-text\">initialRowSelectionRef</code>를 비교하고, 변경된 <code class=\"language-text\">row.id</code>를 서버로 전달한다.</li>\n</ol>\n<p>그리고, invalidateQueries가 동작한 뒤, refresh된 데이터를 받아온다. 이후엔 1번부터 다시 반복된다.<br>\n하지만, 원하는대로 동작하지 않았다.<br>\n문제는, <code class=\"language-text\">initialRowSelectionRef</code>가 업데이트 되지 않는다는 점이다.</p>\n<br/>\n<p>해결방법은 간단하다.<br>\ninitialRowSelectionRef를 initialRowSelection 변수로 변경하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> TableComponents<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>TableComponentsProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialRowSelection <span class=\"token operator\">=</span> <span class=\"token function\">createRowSelection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// const initialRowSelectionRef = useRef&lt;null | RowSelectionState>(</span>\n  <span class=\"token comment\">//   createRowSelection(data),</span>\n  <span class=\"token comment\">// );</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 하면, data가 업데이트 될 때마다, 컴포넌트가 리렌더링 되고, initialRowSelection도 업데이트 된다.<br>\n즉, 데이터를 불러와서 ~ 사용자가 <code class=\"language-text\">Done</code>을 누를 때까지 초기값을 저장해놓을 수 있다.</p>\n<br/>\n<h3 id=\"useref는-왜-업데이트-되지-않은-것일까\" style=\"position:relative;\"><a href=\"#useref%EB%8A%94-%EC%99%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EA%B2%83%EC%9D%BC%EA%B9%8C\" aria-label=\"useref는 왜 업데이트 되지 않은 것일까 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useRef는 왜 업데이트 되지 않은 것일까?</h3>\n<p>내가 react를 사용하면서 ref를 사용한 사례는 크게 두 가지가 있다.</p>\n<ol>\n<li>React가 관리하는 DOM을 직접조작할 때.</li>\n<li>컴포넌트가 일부 값을 저장해야 하지만 렌더링 로직에 영향을 미치지 않는 경우</li>\n</ol>\n<br/>\n<p>대체로 1번의 사례만 사용해서, 2번은 완전히 잊고 있었다..<br>\nref는 컴포넌트 내부에서 일부 값을 저장해놓았을 떄,\n리렌더링을 유발하지도 않고, 리렌더링 되어도 값이 변경되지도 않는다.<br>\n<strong>즉, 렌더링 로직에 영향을 받지 않는다.</strong></p>\n<p>그래서 업데이트하기 위해선,</p>\n<ol>\n<li>useEffect를 사용하거나</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  initialRowSelectionRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">createRowSelection</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>명령적으로 업데이트 시켜준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">syncRowSelection</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    ref<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MutableRefObject<span class=\"token operator\">&lt;</span>RowSelectionState <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    rowSelection<span class=\"token operator\">:</span> RowSelectionState<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref <span class=\"token operator\">&amp;&amp;</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>rowSelection <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3 id=\"그럼-useref와-변수의-차이는-무엇일까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%BC-useref%EC%99%80-%EB%B3%80%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"그럼 useref와 변수의 차이는 무엇일까 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼, useRef와 변수의 차이는 무엇일까?</h3>\n<p>결국 차이는 렌더링 로직의 영향을 받느냐, 받지 않느냐의 차이였다.</p>\n<p><strong>Ref</strong></p>\n<ul>\n<li>컴포넌트가 렌더링 되어도 <strong>초기화되지 않고, 변수를 저장해야하는 경우</strong></li>\n</ul>\n<p><strong>변수</strong></p>\n<ul>\n<li>컴포넌트가 렌더링될 때마다 <strong>초기화 되어야하는 경우</strong></li>\n</ul>\n<br/>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p><a href=\"https://tkdodo.eu/blog/use-state-for-one-time-initializations\" target=\"_blank\" rel=\"nofollow\">useState for one-time initializations</a></p>","tableOfContents":"<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%83%81%ED%99%A9\">문제의 상황</a></li>\n<li><a href=\"#useref%EB%8A%94-%EC%99%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EA%B2%83%EC%9D%BC%EA%B9%8C\">useRef는 왜 업데이트 되지 않은 것일까?</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9F%BC-useref%EC%99%80-%EB%B3%80%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\">그럼, useRef와 변수의 차이는 무엇일까?</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>","frontmatter":{"title":"React, 변수와 Ref","summary":"React에서 변수와 Ref의 차이","date":"2024.05.05.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2024/4/28/ref-and-const/"}},"staticQueryHashes":["1629908903"]}