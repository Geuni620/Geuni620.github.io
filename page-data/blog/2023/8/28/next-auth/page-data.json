{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/8/28/next-auth/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><a href=\"https://geuni620.github.io/blog/2023/8/18/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-1</a><br>\n<a href=\"https://geuni620.github.io/blog/2023/8/24/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-2</a></p>\n<p><a href=\"https://geuni620.github.io/blog/2023/9/10/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-4</a></p>\n<blockquote>\n<p>그리고 오늘 3번째 글을 작성하게 되었다.\n간단히 시도했던 것들을 나열해보면 다음과 같다.</p>\n</blockquote>\n<ol>\n<li>\n<p>유저가 signIn 할 때, accessToken을 DB에 보내고, 저장 → api 요청시 header에 accessToken을 보내서 서버에서 비교 검증</p>\n</li>\n<li>\n<p>next-auth는 로그인 했을 때 session에 cookie로 token을 저장하는데, 이 때 secret key를 통해서 저장 → 서버에서도 동일하게 secret key를 가지고 있으면 cookie를 통해 유저 정보를 식별할 수 있음.</p>\n<ul>\n<li>local에선 정상동작했으나, 서버에 배포하면 cookie를 읽을 수 없었음</li>\n<li>https로 서버 클라이언트 모두 배포했으나, <code class=\"language-text\">secure:true</code>된 값만 반환.</li>\n<li>next-auth 자체에서 cookie option을 설정할 수 있었는데, httpOnly, secure를 모두 false로 두어도 로그인이 풀려버리거나, 로그아웃이 정상동작하지 않는 이슈 발생.</li>\n</ul>\n</li>\n<li>\n<p>server 컴포넌트에서 cookie를 읽어온 후, client 컴포넌트로 cookie 정보를 props로 전달, header에 담아서 보내봤지만, JWT token 복호화 과정에서 문제 발생</p>\n<ul>\n<li>처음엔 잘 되는 듯하다가, 어느 순간 복호화 실패 오류메시지가 뜸.</li>\n</ul>\n</li>\n<li>\n<p>next-auth의 session에 accessToken을 전달할 수 있음. 이렇게 했을 때 useSession으로 accessToken을 가져올 수 있음.</p>\n<ul>\n<li>그럼 이 accessToken을 header에 담아서 서버로 전달, 서버에선 accessToken을 구글 oauth에 전달해서 해당 유저가 맞는지 검증</li>\n<li>해당 유저가 맞을 경우, 데이터를 반환</li>\n</ul>\n</li>\n</ol>\n<br>\n<p>현재까진 4로 적용해 놓은 상태이다.</p>\n<h3 id=\"next-auth-공식문서-잘-읽기\" style=\"position:relative;\"><a href=\"#next-auth-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%EC%9E%98-%EC%9D%BD%EA%B8%B0\" aria-label=\"next auth 공식문서 잘 읽기 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next-auth 공식문서 잘 읽기</h3>\n<ul>\n<li>오늘 주말, 회사 출근해서 ‘오늘은 꼭 밀린 일들 처리하고, 로그인은 accessToken으로 검증하는 방식으로 마무리하자!’ 고 다짐했음.</li>\n<li>하지만 오늘도 열려있던 웹 브라우저 내에서 github issues들을 보게 되었다.</li>\n</ul>\n<br>\n<p><a href=\"https://github.com/nextauthjs/next-auth/issues/405\" target=\"_blank\" rel=\"nofollow\">What is the best way to have same authentication on all subdomains?</a></p>\n<ul>\n<li>위 링크를 보자마자 혹여나 하는 생각에 sub-domain을 잘못 입력한 것 같다는 생각이 들었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// lib/auth.ts</span>\n<span class=\"token keyword\">const</span> useSecureCookies <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">GoogleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      clientId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_ID</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      clientSecret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_SECRET</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 이 부분이 중요!</span>\n  cookies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    sessionToken<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>useSecureCookies <span class=\"token operator\">?</span> <span class=\"token string\">'__Secure-'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">next-auth.session-token</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        httpOnly<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        sameSite<span class=\"token operator\">:</span> <span class=\"token string\">'lax'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        domain<span class=\"token operator\">:</span> <span class=\"token string\">'.jejodo.life'</span><span class=\"token punctuation\">,</span>\n        secure<span class=\"token operator\">:</span> useSecureCookies<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>production 환경에서는 name에 __Secure가 붙는다.</li>\n<li>여기서 중요한게 domain을 원래는 <code class=\"language-text\">dev.jejodo.life</code> 또는 <code class=\"language-text\">api.jejodo.life</code>라고 입력했었는데, 이걸 <code class=\"language-text\">.jejodo.life</code>로 바꿔주었다.</li>\n<li>그리고 token 값을 서버에서 확인 해봤을 때, 기존에 null 뜨던게, 정상 동작한다.</li>\n<li>즉, <a href=\"https://geuni620.github.io/blog/2023/8/24/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-2</a>에서 마지막에 해결하지 못했던 cookie 값을 EC2 배포 이후에도 정상적으로 가져올 수 있게 되었다.</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>이젠 고민 중이다.</p>\n<ol>\n<li>session을 이용해서만 maxAge를 적용한 상태로, maxAge가 끝나면 log-out 시키기</li>\n<li>google oauth를 사용하고 있으니, refresh token을 적용해서 accessToken은 header를 통해서 가져오고, refresh token은 cookie에 보관한다.\n<ul>\n<li>이 방법은 정확하지 않다. 더 찾아봐야할 것 같다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>결국 문제는, accessToken를 적용해놓았는데, 만료시간이 짧고, refreshToken이 없어서 자주 로그아웃을 해야한다는 불편함이 존재한다.</p>\n</li>\n<li>\n<p>이제 이 문제를 해결해야한다.</p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#next-auth-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%EC%9E%98-%EC%9D%BD%EA%B8%B0\">next-auth 공식문서 잘 읽기</a></li>\n</ul>","frontmatter":{"title":"next-auth token 관리하기-3","summary":"우연히 발견한 github issue글을 토대로 해결할 수 있었다!","date":"2023.08.28.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/8/28/next-auth/"}},"staticQueryHashes":["1629908903"]}