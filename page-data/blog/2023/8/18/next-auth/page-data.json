{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/8/18/next-auth/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>아래에 내용은 잘못된 부분이 존재합니다. 당시엔 저렇게 생각했지만 현재는 다음과 같은 글을 다시 썼습니다.\n읽어보시기 전에 이 글을 보셔도 좋고, 읽고 나서 이 글을 보셔도 좋습니다.\n이 글은 꼭 읽어주셨으면 합니다. <strong>아래는 잘못된 내용이 포함</strong>되어 있으니까요.</p>\n<p><a href=\"https://geuni620.github.io/blog/2023/8/24/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-2</a><br>\n<a href=\"https://geuni620.github.io/blog/2023/8/28/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-3</a><br>\n<a href=\"https://geuni620.github.io/blog/2023/9/10/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-4</a></p>\n<hr>\n<blockquote>\n<p>next-auth로 어떻게 token을 관리하는걸까?<br>\n현재 프론트는 next.js / backend는 express로 구성되어있다.<br>\ndb는 mysql, orm은 prisma를 사용했다.<br>\n구글 oauth를 통해 로그인을 하고, 유저의 정보를 DB에 저장하긴 하는데,,, 유저가 만약 geuni620이라면, geuni620에 해당하는 데이터를 줘야할 텐데, authorization을 어떻게 할 수 있지???</p>\n</blockquote>\n<br>\n<h3 id=\"next-auth로-token-관리하기\" style=\"position:relative;\"><a href=\"#next-auth%EB%A1%9C-token-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"next auth로 token 관리하기 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next-auth로 token 관리하기</h3>\n<p>맨 처음엔, <code class=\"language-text\">userEmail</code>을 가지고 DB에서 해당 데이터를 return해주었다.<br>\n아무것도 모르다보니, 그리고 기능구현에 급급하다보니, 혼자하다보니, 이렇게 만들었는데 문득 이런 생각이 들었다.</p>\n<p><code class=\"language-text\">api 서버도 배포를 했는데, url로 예를들어 deep.jejodo.life/geuni620을 치면, geuni620에 해당하는 데이터를 반환하면 안되지않나?</code></p>\n<br>\n<p>그래서 next-auth 공식문서를 찾아봤고, 결국 두 가지로 관리할 수 있다는 걸 알게됐다.</p>\n<ol>\n<li>next-auth의 session</li>\n<li>db</li>\n</ol>\n<br>\n<p>db를 사용하려면 <a href=\"https://authjs.dev/reference/adapters\" target=\"_blank\" rel=\"nofollow\">adapter</a>를 쓰는 것 같은데, 나는 DB로 token을 관리하고 싶지 않았다.\ncookie와 session으로 관리하고 싶었고, db에 token을 저장하고 싶지도 않았다.</p>\n<br>\n<p>accessToken은 아래 코드를 통해 session에 추가해주면 반환받을 수 있다.\n만약 추가해주지 않는다면, useSession hooks을 통해 accessToken을 가져올 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">GoogleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      clientId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_ID</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      clientSecret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_SECRET</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  session<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token operator\">:</span> <span class=\"token string\">'jwt'</span><span class=\"token punctuation\">,</span>\n    maxAge<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 30 days</span>\n    updateAge<span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 24 hours</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_SECRET</span><span class=\"token punctuation\">,</span>\n\n  callbacks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> account <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> dataToSend <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>user<span class=\"token punctuation\">,</span>\n          accessToken<span class=\"token operator\">:</span> account<span class=\"token operator\">?.</span>access_token<span class=\"token punctuation\">,</span>\n          expires<span class=\"token operator\">:</span> account<span class=\"token operator\">?.</span>expires_at<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_SERVER_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/api/user</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>dataToSend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> account <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        token<span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>access_token<span class=\"token punctuation\">;</span> <span class=\"token comment\">// accessToken을 token에 넣어준다.</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> token <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sesstion에 token을 넣어준다, 그리고 useSesstion hooks을 통해 accessToken을 받아올 수 있다.</span>\n\n      <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자 그럼 accessToken은 useSession hooks을 통해 받아올 수 있게 됐다.\n그럼 이걸 fetch의 header에 넣어서 보내주면 되겠지?\n그럼 express 서버에서는 이 accessToken을 어떻게 authorization할까???</p>\n<br>\n<h3 id=\"express에서-token-관리하기\" style=\"position:relative;\"><a href=\"#express%EC%97%90%EC%84%9C-token-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"express에서 token 관리하기 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>express에서 token 관리하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// middleware.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Request<span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">,</span> NextFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/jwt'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requireAuth</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span>\n  res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> NextFunction<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authHeader <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>authHeader <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>authHeader<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'토큰이 없어요!!!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> authHeader<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">,</span>\n      secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_SECRET</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> token<span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">!==</span> accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res\n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'client와 server의 토큰이 같지 않아요!!!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">(</span>req <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">=</span> accessToken<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        error<span class=\"token operator\">:</span> <span class=\"token string\">'토큰 검증 중 에러가 발생했어요!!!'</span><span class=\"token punctuation\">,</span>\n        details<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res\n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'토큰 검증 중 알 수 없는 에러가 발생했어요!!!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>결국 backend에서도 next-auth package를 설치한다.</strong> 그리고 import로 getToken 함수를 가져온다.\nsecret key는 <code class=\"language-text\">.env</code> 환경변수로 관리해주고, 클라이언트에서 header에 심어서 오는 accessToken과 cookie에 심어져 오는 accessToken을 비교해준다.\n비교한 결과가 true로 일치할 경우 해당 user에 대한 정보를 반환한다.</p>\n<p>express에서 위 검증과정을 위해 middleware를 사용했다.</p>\n<p>next-auth는 풀스택을 위한 라이브러리이다. next.js를 이용해서 로그인 로직을 구현할 때 api폴더를 사용해서 서버 api를 구현할 수 있다.\n즉, next.js내에서만 next-auth를 사용하면 되는 것이다. 하지만 나의 경우엔, express server를 따로 두고 있다.</p>\n<p>cookie의 token은 암호화된 상태로 오게되는데, jwt이다. 이걸 복호화하기 위해 복호화 라이브러리도 설치해서 적용해봤는데, 결국 다 에러가 난다.\n즉, <code class=\"language-text\">getToken</code>을 통해 간단히 cookie에 심어져오는 token을 복호화 할 수 있다.</p>","tableOfContents":"<ul>\n<li><a href=\"#next-auth%EB%A1%9C-token-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">next-auth로 token 관리하기</a></li>\n<li><a href=\"#express%EC%97%90%EC%84%9C-token-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">express에서 token 관리하기</a></li>\n</ul>","frontmatter":{"title":"next-auth token 관리하기-1","summary":"http 통신할 때, accessToken을 서버에선 어떻게 가지고 있을 수 있을까?","date":"2023.08.19.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/8/18/next-auth/"}},"staticQueryHashes":["1629908903"]}