{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/8/24/next-auth/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><a href=\"https://geuni620.github.io/blog/2023/8/18/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-1</a></p>\n<p><a href=\"https://geuni620.github.io/blog/2023/8/28/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-3</a><br>\n<a href=\"https://geuni620.github.io/blog/2023/9/10/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-4</a></p>\n<blockquote>\n<p>일 주일 전쯤에, next-auth token 관리하기 라는 글을 썼는데, 알고보니 잘못된 코드가 많았다.</p>\n</blockquote>\n<h3 id=\"1-cookie에-jwt를-저장한-후-server에서-cookie로-api-인증하려고-했다면\" style=\"position:relative;\"><a href=\"#1-cookie%EC%97%90-jwt%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%9C-%ED%9B%84-server%EC%97%90%EC%84%9C-cookie%EB%A1%9C-api-%EC%9D%B8%EC%A6%9D%ED%95%98%EB%A0%A4%EA%B3%A0-%ED%96%88%EB%8B%A4%EB%A9%B4\" aria-label=\"1 cookie에 jwt를 저장한 후 server에서 cookie로 api 인증하려고 했다면 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. cookie에 jwt를 저장한 후, server에서 cookie로 api 인증하려고 했다면.</h3>\n<ul>\n<li>이 전글에서 다음과 같은 코드를 보여줬다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Request<span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">,</span> NextFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/jwt'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requireAuth</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span>\n  res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> NextFunction<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authHeader <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>authHeader <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>authHeader<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'토큰이 없어요!!!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> authHeader<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">,</span>\n      secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_SECRET</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> token<span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">!==</span> accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res\n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'client와 server의 토큰이 같지 않아요!!!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">(</span>req <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">=</span> accessToken<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        error<span class=\"token operator\">:</span> <span class=\"token string\">'토큰 검증 중 에러가 발생했어요!!!'</span><span class=\"token punctuation\">,</span>\n        details<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res\n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'토큰 검증 중 알 수 없는 에러가 발생했어요!!!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>여기선 불필요한 부분이 존재한다.</p>\n<ol>\n<li>\n<p>authHeader에 authorization이라는 token을 심어서 보냈다.\n이때, 이 token은 불필요하다. 왜냐하면, cookie를 통해서 jwt가 암호화된 상태로 전달되기 때문이다.\n그리고 이 jwt는 서버에서 cookie-parser를 통해서 가져온 후, secret를 통해서 복호화한다.\n즉, header의 accessToken은 불필요했다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">if (!token || token.accessToken !== accessToken)</code> 중 앞의 <code class=\"language-text\">!token</code>과 뒤의 <code class=\"language-text\">token.accessToken !== accessToken</code>는 각각 error 문구를 다르게 보여줘야했다.<br>\n예를 들면, !token은, <code class=\"language-text\">getToken으로 cookie를 복호화하는 도중 에러가 발생했어요.</code> 라고 보여줘야했을 것 같고, 뒤의 부분은 <code class=\"language-text\">token.accessToken과 accessToken이 같지않아요.</code> 라고 보여줘야했을 것 같다.</p>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h3 id=\"2-ec2-배포-이후에-정상적으로-동작하지-않는다\" style=\"position:relative;\"><a href=\"#2-ec2-%EB%B0%B0%ED%8F%AC-%EC%9D%B4%ED%9B%84%EC%97%90-%EC%A0%95%EC%83%81%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"2 ec2 배포 이후에 정상적으로 동작하지 않는다 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ec2 배포 이후에, 정상적으로 동작하지 않는다.</h3>\n<p>내가 원하던 방식은 다음과 같다.</p>\n<ol>\n<li>next-auth를 통해서 google oauth로 로그인한다</li>\n<li>로그인 하고 나서 cookie에 <code class=\"language-text\">next-auth-session-token</code>이 저장된다.</li>\n<li>server로 요청을 보낼 때 cookie를 심어서 보낸다.</li>\n<li>server에서 middleware로 cookie를 가져오고, getToken 함수에 request와 secret key를 넣어서 cookie를 복호화한다.</li>\n<li>복호화하면 유저정보가 나오는데, 이 정보를 이용해서 db에 해당하는 유저정보는 반환한다.</li>\n</ol>\n<br>\n<p>위 방식은 <strong>로컬에선</strong> 잘 동작하는 듯 보인다. 하지만, ec2에 <strong>다른 도메인</strong>으로 배포한 후엔 <strong>정상적으로 동작하지 않는다.</strong></p>\n<p>문제는 cookie에서 next-auth-session-token을 서버에서 가져오려고 하면 <code class=\"language-text\">secure:true</code>되어 있어, https에서만 가져올 수 있다는 것이다.\n하지만, ec2에 https로 도메인을 달아준 상태인데, 이게 왜 안되는지 모르겠다.<br>\n여러 원인이 있겠지만, next-auth에선 <a href=\"https://next-auth.js.org/configuration/options#cookies\" target=\"_blank\" rel=\"nofollow\">cookies option</a> session을 설정해줄 수 있다.</p>\n<p>그래서 sessionToken을 굉장히 러프하게 설정해봤다 sameSite: “none” / httpsOnly: false 등등\n그래도 정상적으로 동작하지 않았다.</p>\n<br>\n<p>결국 방법을 아직 찾지 못했다. 찾게 되면 다시 글을 써야할 것 같다.\n현재는 jwt token을 서버에서 자체 생성하고, 암호화한 후 복호화할 땐 client와 server에 env 파일 내 secret key를 가지고 복호화하는 방식으로 진행하고 있다.</p>","tableOfContents":"<ul>\n<li><a href=\"#1-cookie%EC%97%90-jwt%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%9C-%ED%9B%84-server%EC%97%90%EC%84%9C-cookie%EB%A1%9C-api-%EC%9D%B8%EC%A6%9D%ED%95%98%EB%A0%A4%EA%B3%A0-%ED%96%88%EB%8B%A4%EB%A9%B4\">1. cookie에 jwt를 저장한 후, server에서 cookie로 api 인증하려고 했다면.</a></li>\n<li><a href=\"#2-ec2-%EB%B0%B0%ED%8F%AC-%EC%9D%B4%ED%9B%84%EC%97%90-%EC%A0%95%EC%83%81%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\">2. ec2 배포 이후에, 정상적으로 동작하지 않는다.</a></li>\n</ul>","frontmatter":{"title":"next-auth token 관리하기-2","summary":"next-auth, 대체 어떻게 잘 다룰 수 있는걸까...?","date":"2023.08.24.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/8/24/next-auth/"}},"staticQueryHashes":["1629908903"]}