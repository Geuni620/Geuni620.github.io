{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/5/15/[Tanstack-query] client-state vs server-state/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3 id=\"client-state-vs-server-state\" style=\"position:relative;\"><a href=\"#client-state-vs-server-state\" aria-label=\"client state vs server state permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client-state vs server-state</h3>\n<p><a href=\"https://tkdodo.eu/blog/react-query-and-forms\" target=\"_blank\" rel=\"nofollow\">React Query and Forms</a></p>\n<blockquote>\n<p>위 글을 읽고 고민했던 내용 기록</p>\n</blockquote>\n<br>\n<ul>\n<li>react-query로 받아온 데이터를 state에 담아주는게 안티패턴일 가능성이 높으며, server-state와 client-state를 분리하는게 좋아보임.\n<ul>\n<li>이 경우는 예외가 될 수 있을 것 같은데, 유저 상세 데이터 중, 유저의 상태를 설정하는 드롭다운바가 있었음.</li>\n<li>이때, 해당 데이터를 선택하고 업데이트를 클릭하면 server에 mutate 해주었는데, useQuery로 데이터를 받아오자마자, client-state로 관리하기 위해 state에 담아주고, onClick 이벤트로 setState 걸어줬었음.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// userDetail data를 서버로 부터 받아오고</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> userDetail <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUserDetailQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   userId<span class=\"token operator\">:</span> query<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// client에서 변경될 것으로 예상되는 데이터는 state에 담아줬음.</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentUserType<span class=\"token punctuation\">,</span> setCurrentUserType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n   <span class=\"token function\">translateValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     value<span class=\"token operator\">:</span> userDetail<span class=\"token punctuation\">.</span>userType<span class=\"token punctuation\">,</span>\n     formatMap<span class=\"token operator\">:</span> userTypeKoreanMap<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentUserState<span class=\"token punctuation\">,</span> setCurrentUserState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n   <span class=\"token function\">translateValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     value<span class=\"token operator\">:</span> userDetail<span class=\"token punctuation\">.</span>userState<span class=\"token punctuation\">,</span>\n     formatMap<span class=\"token operator\">:</span> userStateKoreanMap<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onUserTypeSelect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>selectValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCurrentUserType</span><span class=\"token punctuation\">(</span>selectValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onUserStateSelect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>selectValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCurrentUserState</span><span class=\"token punctuation\">(</span>selectValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>위 블로그를 토대로 명확히 구분했어야한다면, state는 null로 관리하고, 이벤트가 발생했을 때 state에 담아준 후,<br>\ninititalValue는 <code class=\"language-text\">currentUserType ?? userDetail.userType</code>와 같이 사용한 후, 업데이트를 할 땐, currentUserType으로 mutate 걸어주면 명확히 분리시킬 수 있는 것 같음.</p>\n</li>\n<li>\n<p>단 이렇게까지 복잡할 일인가,,,? 싶어서 useQuery로 데이터를 받아오자마자 client-state로 관리했음.</p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#client-state-vs-server-state\">client-state vs server-state</a></li>\n</ul>","frontmatter":{"title":"[Tanstack-query] client-state vs server-state","summary":"-","date":"2023.05.15.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/5/15/[Tanstack-query] client-state vs server-state/"}},"staticQueryHashes":["1629908903"]}