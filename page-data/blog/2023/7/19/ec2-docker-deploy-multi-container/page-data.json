{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/7/19/ec2-docker-deploy-multi-container/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<blockquote>\n<p>이름을 거창하게 지어봤지만, 이전 <a href=\"https://geuni620.github.io/blog/2023/6/26/ec2-docker-deploy/\" target=\"_blank\" rel=\"nofollow\">ec2-docker-deploy</a>에서 server 배포가 추가된 것 뿐이다.</p>\n</blockquote>\n<h3 id=\"multi-stage\" style=\"position:relative;\"><a href=\"#multi-stage\" aria-label=\"multi stage permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>multi-stage</h3>\n<p>오늘 정확히 오후 2시부터 저녁 9시까지 배포와의 씨름이었다.\n조금 무모했던게, 동료분들이 선 배포하실 때 썼던 코드가 있었음에도 불구하고, 조금 고집을 부렸다…<br>\n그래도 부딪히면서 배우는게 가장 크게 배우는 점이라는 생각으로 부턱대고 부딪혔다.</p>\n<br>\n<p>대략 핵심은 이러했다. 이전에 client 배포를 했었는데, 이번엔 client와 server배포를 한 번에 진행하는 것이었다.<br>\ndocker를 이용해서 compose에 client와 server docker를 둘 다 작성해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 대략 폴더구조는 이러하다.\n├── cicd.sh // root에서 sh cicd.sh를 실행하면 모든게 자동배포되길 바랐다.\n├── client\n│   ├── README.md\n│   ├── app\n│   ├── components\n│   ├── dockerfile\n│   ├── lib\n│   ├── next-env.d.ts\n│   ├── next.config.js\n│   ├── node_modules\n│   ├── package-lock.json\n│   ├── package.json\n│   ├── postcss.config.js\n│   ├── public\n│   ├── tailwind.config.js\n│   └── tsconfig.json\n├── deploy\n│   ├── client\n│   ├── deploy.sh\n│   ├── package.sh\n│   ├── production.sh\n│   ├── production.yml\n│   └── server\n└── server\n    ├── dist\n    ├── dockerfile\n    ├── node_modules\n    ├── package-lock.json\n    ├── package.json\n    ├── prisma\n    ├── src\n    └── tsconfig.json</code></pre></div>\n<p>순서는 다음과 같다.</p>\n<ol>\n<li>sh cicd.sh 실행</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># cicd.sh</span>\n<span class=\"token function\">sh</span> deploy/package.sh <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sh</span> deploy/deploy.sh</code></pre></div>\n<ol start=\"2\">\n<li>sh deploy/package.sh 실행</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 프로젝트의 루트 디렉토리를 정의</span>\n<span class=\"token assign-left variable\">PROJECT_ROOT</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token punctuation\">$(</span>realpath $0<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span>/<span class=\"token punctuation\">..</span>\n<span class=\"token assign-left variable\">CLIENT_PROJECT_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${PROJECT_ROOT}</span>/client\"</span>\n<span class=\"token assign-left variable\">SERVER_PROJECT_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${PROJECT_ROOT}</span>/server\"</span>\n<span class=\"token assign-left variable\">CLIENT_DEPLOY_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${PROJECT_ROOT}</span>/deploy/client\"</span>\n<span class=\"token assign-left variable\">SERVER_DEPLOY_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${PROJECT_ROOT}</span>/deploy/server\"</span>\n\n<span class=\"token comment\"># # 클라이언트 코드를 빌드</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>\n<span class=\"token function\">npm</span> run build <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/.next <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/package.json <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/package-lock.json <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/next.config.js <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/public <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/.env.production <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$CLIENT_PROJECT_DIR</span>/dockerfile <span class=\"token variable\">$CLIENT_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"client packaging done\"</span>\n\n\n<span class=\"token comment\"># 서버 코드를 빌드</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>\n<span class=\"token function\">npm</span> run build <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>/dist <span class=\"token variable\">$SERVER_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>/package.json <span class=\"token variable\">$SERVER_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>/package-lock.json <span class=\"token variable\">$SERVER_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>/.env <span class=\"token variable\">$SERVER_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\"># .env.production이 아닌 .env로 넘겨줬다. ec2환경에서 docker container 내에서 .env.production을 읽지 못하는 이슈때문이었다.</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>/prisma <span class=\"token variable\">$SERVER_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> <span class=\"token variable\">$SERVER_PROJECT_DIR</span>/dockerfile <span class=\"token variable\">$SERVER_DEPLOY_DIR</span>/ <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"server packaging done\"</span></code></pre></div>\n<p>여기서 rsync가 무엇인지, -avz가 무엇인진 잘 모른다. 대략 흐름정도만 이해하고 있다.<br>\nclient와 server가 각각 build된 파일 중 production 환경에서 실행에 필요한 파일들만 deploy/client와 deploy/server롤 복사해준다.\n–delete는 기존에 담겨져 있던 파일이 있다면 삭제하고 새롭게 갈아끼워준다.</p>\n<br>\n<ol start=\"3\">\n<li>sh deploy/deploy.sh 실행</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># rsync 명령어를 사용하여 파일 및 디렉토리를 복사합니다.</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"ssh -i ~/desktop/keys/geuni.pem\"</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> deploy/client/ ubuntu@number-value:경로경로/deep-jejodo-life/client <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"ssh -i ~/desktop/keys/geuni.pem\"</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> deploy/server/ ubuntu@number-value:경로경로/deep-jejodo-life/server <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"ssh -i ~/desktop/keys/geuni.pem\"</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> deploy/production.yml ubuntu@number-value:경로경로/deep-jejodo-life/ <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"ssh -i ~/desktop/keys/geuni.pem\"</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token parameter variable\">--delete</span> deploy/production.sh ubuntu@number-value:경로경로/deep-jejodo-life/ <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Deployment done\"</span> <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> ~/desktop/keys/geuni.pem ubuntu@number-value <span class=\"token string\">\"cd /home/geuni/deep-jejodo-life/ &amp;&amp; sudo sh production.sh\"</span> <span class=\"token operator\">&amp;&amp;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Docker Container Start!!!\"</span></code></pre></div>\n<p>여기서는 위 deploy폴더 내에 build 된 파일들을 EC2 server 환경으로 복사해서 옮겨준다.<br>\n본 프로젝트는 deep-jejodo-life 프로젝트이므로, deep-jejodo-life폴더 내 모두 담아주게 된다.</p>\n<br>\n<ol start=\"4\">\n<li>sh production.sh</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">BASEDIR</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> $0<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">${BASEDIR}</span> <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> production.yml up --force-recreate <span class=\"token parameter variable\">--build</span> <span class=\"token parameter variable\">-d</span></code></pre></div>\n<p>production.sh가 실행되는 환경은 EC2 서버 내에서 실행된다. 그래서 production.yml compose 파일이 실행되는데 이건 다음과 같이 작성해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.1\"</span>\n\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> deep<span class=\"token punctuation\">-</span>jejodo<span class=\"token punctuation\">-</span>life\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">deep-jejodo-life-client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> deep<span class=\"token punctuation\">-</span>jejodo<span class=\"token punctuation\">-</span>life<span class=\"token punctuation\">-</span>client\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> ./client\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> dockerfile <span class=\"token comment\"># client내 dockerfile을 작성해놓았다</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3040:3000\"</span> <span class=\"token comment\">#container 외부포트는 30400으로 받지만, 내부포트는 3000번이다.</span>\n\n  <span class=\"token key atrule\">deep-jejodo-life-server</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> deep<span class=\"token punctuation\">-</span>jejodo<span class=\"token punctuation\">-</span>life<span class=\"token punctuation\">-</span>server\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> ./server <span class=\"token comment\"># server내 dockerfile을 작성해놓았다</span>\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> dockerfile\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8040:8000\"</span> <span class=\"token comment\">#container 외부포트는 8040으로 받지만, 내부포트는 8000번이다.</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># client/dockerfile</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:18.15.0 <span class=\"token keyword\">AS</span> builder</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package*.json ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm ci</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /app/node_modules ./node_modules</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /app/package.json ./package.json</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./next.config.js /app/next.config.js</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./.env.production /app/.env.production</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./.next /app/.next</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./public /app/public</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"run\"</span>, <span class=\"token string\">\"start\"</span>]</span>\n\n\nserver/dockerfile\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:18.15.0 <span class=\"token keyword\">AS</span> builder</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package*.json ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm ci</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /app/node_modules ./node_modules</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /app/package.json ./package.json</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./next.config.js /app/next.config.js</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./.env /app/.env</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./.next /app/.next</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./public /app/public</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"run\"</span>, <span class=\"token string\">\"start\"</span>]</span></code></pre></div>\n<p>여기서 좀 헤맸던게, prisma 폴더를 넘겨줘야하는지, 아닌지 몰라서 헤맸다. prisma내에 migrate된 폴더들이 존재하는데, 처음엔 옮겨주지 않아서 server-container내에서 log를 찍었을 때 에러가 떴다…<br>\n이것 찾느라고 한 참 걸렸다. 분명 prisma를 복사해서 docker app 내에 넣어줬는데, EC2 서버에선 없는게 아닌가… 알고보니, package.sh에서 부터 prisma를 빼먹어서, dockerfile내에서는 prisma폴더가 없으니, 복사하려고해도 복사할 prisma폴더가 존재하지 않았던 것이었다.</p>\n<br>\n<p>이후에 <code class=\"language-text\">echo \"Docker Container Start!!!\" </code>가 터미널에 찍히면, 배포가 완료된 것이다</p>\n<br>\n<h3 id=\"그-외-오늘-배포하면서-익힌-것들\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8-%EC%98%A4%EB%8A%98-%EB%B0%B0%ED%8F%AC%ED%95%98%EB%A9%B4%EC%84%9C-%EC%9D%B5%ED%9E%8C-%EA%B2%83%EB%93%A4\" aria-label=\"그 외 오늘 배포하면서 익힌 것들 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외 오늘 배포하면서 익힌 것들.</h3>\n<ul>\n<li>docker images를 통해 docker image 리스트를 확인할 수 있다</li>\n<li>docker ps를 통해 docker container 리스트를 확인할 수 있다</li>\n<li>docker images를 삭제하려면 container부터 stop시키고, container 삭제 후 image를 삭제한다</li>\n<li>docker stop container_id &#x26;&#x26; docker rm container_id &#x26;&#x26; docker rmi image_id 한번에 하는 명령어가 있었는데, 기억이 안나서 이렇게 작성했다.</li>\n</ul>\n<br>\n<p>그리고 EC2에 접속해서는 sudo를 붙여야했다. 그리고 기존에 deep-jejodo-life 폴더 내 배포된 것은 client 파일들이었다. 한 번 EC2서버내에서 폴더를 삭제하고, 다시 폴더를 만든 후, 작업하려 했는데, 권한상 문제가 생겨서 chat-gpt를 통해서 권한을 입혀주는 작업을 했다…\n정확히는 무엇인 모르겠는데, geuni.pem의 권한이 조금 낮은 것 같고, 기존 높은 권한 파일로 지정해주니 잘 적용되었다.\n(사실 이 부분은 아직 명확히 모르겠다.)</p>\n<br>\n<p>뭔가 최근에 조금 답답함이 있었는데, 열심히하는 것 같은데 성장하지 못한다는 기분때문이었다. 하지만 역시 개발은 계단식 성장이다. 남과 비교하지말고, 나와 비교하면서 조금씩만 성장해보자.</p>\n<br>\n<p>그리고, 오늘 든 생각인데, 사회의 인정도 중요하다. 하지만 그게 꼭 빅테크, 큰 기업일 필요는 없다. 기업보다 나 자신의 가치가 높아진다면 그것만큼 멋진게 있을까…?</p>","tableOfContents":"<ul>\n<li><a href=\"#multi-stage\">multi-stage</a></li>\n<li><a href=\"#%EA%B7%B8-%EC%99%B8-%EC%98%A4%EB%8A%98-%EB%B0%B0%ED%8F%AC%ED%95%98%EB%A9%B4%EC%84%9C-%EC%9D%B5%ED%9E%8C-%EA%B2%83%EB%93%A4\">그 외 오늘 배포하면서 익힌 것들.</a></li>\n</ul>","frontmatter":{"title":"ec2-docker-deploy-multi-container","summary":"ec2에 서버와 프론트 모두 배포해보자","date":"2023.07.19.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/7/19/ec2-docker-deploy-multi-container/"}},"staticQueryHashes":["1629908903"]}