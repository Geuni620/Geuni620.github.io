{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/9/30/what-is-different-query-params/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<blockquote>\n<p>가끔 api 요청을 보낼 때, query와 params를 어떨 때 쓰는지 헷갈리곤 한다.\n그래서일까… 대부분은 params를 사용하곤 했다.\n이번에 조금 더 명확히 정리해보자.</p>\n</blockquote>\n<br>\n<h3 id=\"reqquery-vs-resparams\" style=\"position:relative;\"><a href=\"#reqquery-vs-resparams\" aria-label=\"reqquery vs resparams permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>req.query vs res.params</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// req.query\n// https://domain.com/api?name=geuni620\n\n// req.params\n// https://domain.com/api/${userName}</code></pre></div>\n<p>query</p>\n<ul>\n<li>위와같이 query는 ?(물음표) 뒤에 필요한 변수를 key=value 형태로 전달한다.</li>\n<li>&#x26;을 통해 추가적인 조건을 전달할 수 있다.</li>\n<li><strong>filtering</strong>, <strong>sorting</strong>에 주로 사용한다.</li>\n<li>빈 목록을 반환하려는 경우, 매개변수를 찾을 수 없는 경우, <code class=\"language-text\">https://domain.com/api/contents?name=geuni</code></li>\n</ul>\n<br>\n<p>params</p>\n<ul>\n<li>주소에 포함된 변수를 담아서 보낸다.</li>\n<li>주로 이 params를 사용했는데, <code class=\"language-text\">:userEmail</code>과 같이 get요청시 유저의 email를 받아서 db에서 해당 데이터를 빼내 전달했다.</li>\n<li>리소스를 식별해야할 경우 query.params를 사용한다.</li>\n<li>404 오류를 반환하려고 하는 경우, params를 사용하는 게 좋은 것 같다.</li>\n<li>예를들어 232 유저가 존재하지 않아서 404를 띄울 경우엔, <code class=\"language-text\">https://domain.com/api/user/232</code>를 사용함</li>\n</ul>\n<br>\n<hr>\n<p>아래 내용은 stack-over-flow에서 발견한 답변 중 query와 params를 구분하는 방법이다.<br>\n<a href=\"https://stackoverflow.com/questions/4024271/rest-api-best-practices-where-to-put-parameters\" target=\"_blank\" rel=\"nofollow\">REST API Best practices: Where to put parameters?</a></p>\n<ol>\n<li>Locators - 아이디나, 보기/액션과 같은 리소스 식별자</li>\n<li>Filters - 검색이나, 정렬, 또는 결과의 범위를 좁힐 때.</li>\n<li>State - 세션, api 키값</li>\n<li>Content - 데이터의 저장공간</li>\n</ol>\n<p>이러한 값들은 다양한 위치에서 사용될 수 있는데 다음과 같다.</p>\n<ul>\n<li>헤더나 쿠키</li>\n<li>URL의 쿼리스트링(queryString)</li>\n<li>URL의 경로(path)</li>\n<li>Body 내</li>\n</ul>\n<br>\n<p>일반적으로 State는 유형에 따라 쿠키 또는 헤더에 저장되고, 필요한 경우 <code class=\"language-text\">x-my-header</code>를 사용함.<br>\n마찬가지로 콘텐츠는 쿼리 문자열 또는 http 멀티파트, JSON 콘텐츠로서 요청 본문(Body)에 속함</p>\n<p><code class=\"language-text\">id=5</code>, <code class=\"language-text\">action=refresh</code> 또는 <code class=\"language-text\">page=2</code>와 같은 로케이터는 각 부분이 무엇을 의미하는지 부분적으로 알고 있고, 추가 매개 변수가 URI의 일부로 지정되어 있는 <code class=\"language-text\">mysite.com/article/5/page=2</code>와 같이 URL 경로로 사용하는 것이 좋다.</p>\n<p>필터는 올바른 데이터를 찾는 데 일부이지만 <strong>로케이터</strong>가 반환하는 것의 하위 집합 또는 수정된 부분만 반환하기 때문에 항상 쿼리 문자열에 포함됩니다. <code class=\"language-text\">mysite.com/article/?query=Obama(하위 집합)</code>의 검색은 필터이며, <code class=\"language-text\">/article/5?order=backwards(수정)</code>도 필터입니다. 필터의 이름만 보지 말고 필터가 하는 일을 생각해 보세요!</p>\n<p><code class=\"language-text\">보기</code>가 출력 형식을 결정하는 경우, 원하는 리소스로 이동하는 대신 검색된 리소스의 수정본을 반환하므로 <strong>필터</strong><code class=\"language-text\">(mysite.com/article/5?view=pdf)</code>에 해당함.<br>\n대신 문서의 어떤 특정 부분을 볼지 결정하는 경우<code class=\"language-text\">(mysite.com/article/5/view=summary)</code> 로케이터입니다.</p>\n<p>리소스 집합의 범위를 좁히는 것이 <code class=\"language-text\">필터링이라는 점</code>을 기억할 것. / (query)<br>\n리소스 내에서 특정 항목을 찾는 것은 <code class=\"language-text\">찾기</code>이다. / (path)<br>\n하위 필터링은 원하는 수의 결과를 반환할 수 있음(0도 가능). / (query)<br>\n위치 찾기는 항상 특정 인스턴스가 존재할 경우 해당 인스턴스를 찾는다. / (path)</p>\n<br>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p><a href=\"https://stackoverflow.com/questions/25385559/rest-api-best-practices-args-in-query-string-vs-in-request-body\" target=\"_blank\" rel=\"nofollow\">REST API Best practices: args in query string vs in request body</a></p>\n<p><a href=\"https://stackoverflow.com/questions/4024271/rest-api-best-practices-where-to-put-parameters\" target=\"_blank\" rel=\"nofollow\">REST API Best practices: Where to put parameters?</a></p>","tableOfContents":"<ul>\n<li><a href=\"#reqquery-vs-resparams\">req.query vs res.params</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>","frontmatter":{"title":"query와 params의 차이","summary":"get 요청시 query와 params 항상 헷갈린다. ","date":"2023.09.30.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/9/30/what-is-different-query-params/"}},"staticQueryHashes":["1629908903"]}