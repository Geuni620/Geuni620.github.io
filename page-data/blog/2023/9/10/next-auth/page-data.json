{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/9/10/next-auth/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><a href=\"https://geuni620.github.io/blog/2023/8/18/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-1</a><br>\n<a href=\"https://geuni620.github.io/blog/2023/8/24/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-2</a><br>\n<a href=\"https://geuni620.github.io/blog/2023/8/28/next-auth/\" target=\"_blank\" rel=\"nofollow\">next-auth token 관리하기-3</a></p>\n<blockquote>\n<p>여기선 accessToken, refreshToken, sessionToken에 대해서 다룬다.<br>\n근데, 토큰이 너무 많다..<br>\n각각의 토큰 역할부터 먼저 알아보자</p>\n</blockquote>\n<h3 id=\"token\" style=\"position:relative;\"><a href=\"#token\" aria-label=\"token permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Token</h3>\n<p><a href=\"https://github.com/nextauthjs/next-auth/issues/693\" target=\"_blank\" rel=\"nofollow\">difference between session token and access token? #693</a></p>\n<p>내가 했던 고민을 그대로 했던 누군가가 next-auth github issue에 작성해놓은 질문이 있었다.<br>\n이 질문에 대한 대답도 작성되어 있었는데, 궁금증을 완벽히 해결해주었다.</p>\n<br>\n<p>나의 경우엔 next-auth를 사용해서 google oauth로 로그인을 구현했다.\n그래서 토큰을 크게 3개정도 가지게 되는데 다음과 같다.</p>\n<ul>\n<li>session Token</li>\n<li>access Token</li>\n<li>refresh Token</li>\n</ul>\n<p>조금 명확히 나눠보자면</p>\n<ul>\n<li>session Token</li>\n<li>access Token / refresh Token</li>\n</ul>\n<p>이렇게 나눌 수 있다.</p>\n<ul>\n<li>\n<p>세션 토큰 같은 경우는, ‘사용자가 로그아웃하지 않는 한, 변경되지 않지만 일부 애플리케이션 같은 경우엔 rotate 될 수 있다.</p>\n</li>\n<li>\n<p>그리고 js를 통해 session token에 접근할 수 없어야한다. 즉, js로 읽을 수 없어야한다.</p>\n</li>\n<li>\n<p>반면, accessToken 같은 경우는 한 마디로 ‘session Token보단 덜 중요한 Token이다.’</p>\n</li>\n<li>\n<p>그래서 나의 경우엔 api를 쏠 때 header에 access Token을 담아서 보낸다. 그리고 서버에서 이 사용자가 유효한 사용자인지 확인하고, 유효하다면 api를 실행한다.</p>\n</li>\n<li>\n<p>그리고 access Token은 session Token과 달리 js로 읽을 수 있다. 그래서 Token이 노출 되었을 경우 refresh Token을 이용해 access Token을 재발급 받고, 탈취당한 access Token은 만료시켜버린다.</p>\n</li>\n<li>\n<p>google oauth 같은 경우는 access Token의 유효한 시간은 1시간이다. 1시간 이후엔 refresh Token을 이용해 재 발급 받아야한다.</p>\n</li>\n<li>\n<p>사실 access Token은 사용하지 않아도, 즉 관리하지 않아도 된다. session Token만 사용해도 무방한 듯 하다.</p>\n</li>\n<li>\n<p>하지만 위에서 언급했듯, 나의 경우엔 accessToken으로 api를 인가하고, 1시간 뒤에 refresh Token으로 access Token을 재발급하려고 한다.</p>\n</li>\n</ul>\n<p>생각한대로 구현하기 위해선, refresh Token과 session Token의 시간을 정해서 이 시간 내에 재발급 할 수 있도록 구현해야한다.\n어떻게 구현했는지 살펴보자.</p>\n<br>\n<h3 id=\"refresh-token\" style=\"position:relative;\"><a href=\"#refresh-token\" aria-label=\"refresh token permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>refresh token</h3>\n<p>일단, refresh Token은 단위를 ms 기준으로 잡았다.<br>\n왜냐하면, 단위가 여러 개 일수록 헷갈리기 때문이다.<br>\n즉, 단순화시키기 위해 단위를 ms로 통일했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// auth.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextAuthOptions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GoogleProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/providers/google'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TODO: type error, any type 제거</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GOOGLE_AUTHORIZATION_URL</span> <span class=\"token operator\">=</span>\n  <span class=\"token string\">'https://accounts.google.com/o/oauth2/v2/auth?'</span> <span class=\"token operator\">+</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    prompt<span class=\"token operator\">:</span> <span class=\"token string\">'consent'</span><span class=\"token punctuation\">,</span>\n    access_type<span class=\"token operator\">:</span> <span class=\"token string\">'offline'</span><span class=\"token punctuation\">,</span>\n    response_type<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">refreshAccessToken</span><span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n      <span class=\"token string\">'https://oauth2.googleapis.com/token?'</span> <span class=\"token operator\">+</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        client_id<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_ID</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        client_secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_SECRET</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        grant_type<span class=\"token operator\">:</span> <span class=\"token string\">'refresh_token'</span><span class=\"token punctuation\">,</span>\n        refresh_token<span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>refreshToken <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> refreshedTokens <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> refreshedTokens<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>token<span class=\"token punctuation\">,</span>\n      accessToken<span class=\"token operator\">:</span> refreshedTokens<span class=\"token punctuation\">.</span>access_token<span class=\"token punctuation\">,</span>\n      accessTokenExpires<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> refreshedTokens<span class=\"token punctuation\">.</span>expires_in <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1hour</span>\n      refreshToken<span class=\"token operator\">:</span> refreshedTokens<span class=\"token punctuation\">.</span>refresh_token <span class=\"token operator\">??</span> token<span class=\"token punctuation\">.</span>refreshToken<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'refreshAccessToken-error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_SECRET</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">GoogleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      clientId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_ID</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      clientSecret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_SECRET</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      authorization<span class=\"token operator\">:</span> <span class=\"token constant\">GOOGLE_AUTHORIZATION_URL</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token function\">profile</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n          email<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n          image<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>picture<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  session<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token operator\">:</span> <span class=\"token string\">'jwt'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Seconds - How long until an idle ses</span>\n    maxAge<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 30 days</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  callbacks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// email, credentials 은 undefined되어있음, account는 token에 필요한 정보!</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_SERVER_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/api/user</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n          headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구글 로그인 도중 에러가 발생했어요!!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>account <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        token<span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>access_token<span class=\"token punctuation\">;</span>\n        token<span class=\"token punctuation\">.</span>accessTokenExpires <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>expires_at <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        token<span class=\"token punctuation\">.</span>refreshToken <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>refresh_token<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> nowTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> accessTokenExpires <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>accessTokenExpires <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token constant\">TEN_MINUTES_AGO_IN_MS</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10분 전</span>\n\n      <span class=\"token comment\">// 10분전에 토큰을 갱신해준다.</span>\n      <span class=\"token keyword\">const</span> shouldRefreshTime <span class=\"token operator\">=</span>\n        accessTokenExpires <span class=\"token operator\">-</span> nowTime <span class=\"token operator\">-</span> <span class=\"token constant\">TEN_MINUTES_AGO_IN_MS</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldRefreshTime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token function\">refreshAccessToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> sessionUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>token<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> sessionUser<span class=\"token punctuation\">.</span>refreshToken<span class=\"token punctuation\">;</span>\n      session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> sessionUser <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  debug<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사실 해당 코드는 <a href=\"https://authjs.dev/guides/basics/refresh-token-rotation\" target=\"_blank\" rel=\"nofollow\">next-auth에서 예시로 제공하는 코드</a>를 많이 참고했다.<br>\n하지만 <a href=\"https://jeongyunlog.netlify.app/develop/nextjs/next-auth/\" target=\"_blank\" rel=\"nofollow\">이 블로그</a>에서 <code class=\"language-text\">shouldRefreshTime</code>를 정해놓고, refresh 시키는 코드를 봤다.\n그리고 이를 적용시켜주었다.\n코드를 조금 더 자세히 살펴보자.</p>\n<br>\n<h3 id=\"refresh-token으로-access-token-재발급받기\" style=\"position:relative;\"><a href=\"#refresh-token%EC%9C%BC%EB%A1%9C-access-token-%EC%9E%AC%EB%B0%9C%EA%B8%89%EB%B0%9B%EA%B8%B0\" aria-label=\"refresh token으로 access token 재발급받기 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>refresh Token으로 access Token 재발급받기</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextAuthOptions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GoogleProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/providers/google'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TODO: type error, any type 제거</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GOOGLE_AUTHORIZATION_URL</span> <span class=\"token operator\">=</span>\n  <span class=\"token string\">'https://accounts.google.com/o/oauth2/v2/auth?'</span> <span class=\"token operator\">+</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    prompt<span class=\"token operator\">:</span> <span class=\"token string\">'consent'</span><span class=\"token punctuation\">,</span>\n    access_type<span class=\"token operator\">:</span> <span class=\"token string\">'offline'</span><span class=\"token punctuation\">,</span>\n    response_type<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">refreshAccessToken</span><span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n      <span class=\"token string\">'https://oauth2.googleapis.com/token?'</span> <span class=\"token operator\">+</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        client_id<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_ID</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        client_secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_SECRET</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        grant_type<span class=\"token operator\">:</span> <span class=\"token string\">'refresh_token'</span><span class=\"token punctuation\">,</span>\n        refresh_token<span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>refreshToken <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> refreshedTokens <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> refreshedTokens<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>token<span class=\"token punctuation\">,</span>\n      accessToken<span class=\"token operator\">:</span> refreshedTokens<span class=\"token punctuation\">.</span>access_token<span class=\"token punctuation\">,</span>\n      accessTokenExpires<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> refreshedTokens<span class=\"token punctuation\">.</span>expires_in <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1hour</span>\n      refreshToken<span class=\"token operator\">:</span> refreshedTokens<span class=\"token punctuation\">.</span>refresh_token <span class=\"token operator\">??</span> token<span class=\"token punctuation\">.</span>refreshToken<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'refreshAccessToken-error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_SECRET</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// (1)</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">GoogleProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      clientId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_ID</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      clientSecret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_SECRET</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      authorization<span class=\"token operator\">:</span> <span class=\"token constant\">GOOGLE_AUTHORIZATION_URL</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token function\">profile</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n          email<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n          image<span class=\"token operator\">:</span> profile<span class=\"token punctuation\">.</span>picture<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  callbacks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// email, credentials 은 undefined되어있음, account는 token에 필요한 정보!</span>\n    <span class=\"token comment\">// (2)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_SERVER_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/api/user</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n          headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'구글 로그인 도중 에러가 발생했어요!!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// (3)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>account <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        token<span class=\"token punctuation\">.</span>accessToken <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>access_token<span class=\"token punctuation\">;</span>\n        token<span class=\"token punctuation\">.</span>accessTokenExpires <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>expires_at <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        token<span class=\"token punctuation\">.</span>refreshToken <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span>refresh_token<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> nowTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> accessTokenExpires <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>accessTokenExpires <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token constant\">TEN_MINUTES_AGO_IN_MS</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10분 전</span>\n\n      <span class=\"token comment\">// 10분전에 토큰을 갱신해준다.</span>\n      <span class=\"token keyword\">const</span> shouldRefreshTime <span class=\"token operator\">=</span>\n        accessTokenExpires <span class=\"token operator\">-</span> nowTime <span class=\"token operator\">-</span> <span class=\"token constant\">TEN_MINUTES_AGO_IN_MS</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldRefreshTime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token function\">refreshAccessToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// (4)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> sessionUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>token<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> sessionUser<span class=\"token punctuation\">.</span>refreshToken<span class=\"token punctuation\">;</span>\n      session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> sessionUser <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  debug<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// development에서 debug를 보기위해 다음과 같이 설정해주었다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>제외할 건 제외하고 나서, refreshToken과 accessToken에 관한 로직이다.</li>\n<li>먼저 google oauth를 통해 로그인을 한다. (1)</li>\n<li>callback으로 server에 user에 대한 데이터를 저장한다. (2)</li>\n<li>jwt를 통해 token을 관리한다. (3)</li>\n<li>useSession에 담아줄 session을 만들어준다. (4)</li>\n</ul>\n<br>\n<p>이번 포스팅의 핵심은 (3)에 있다.</p>\n<ul>\n<li>jwt 메서드에서 token을 관리해주는데, account에서 발급된 accessToken과 expires_at(만료시간, 단위는 s), refreshToken을 token에 담아준다</li>\n<li>그리고 이 토큰을 return하는데, 이 때 시간을 계산한다. (나의 경우엔 10분전에 shouldRefreshTime이 0보다 작아지길 바랐다.)</li>\n<li>shouldRefreshTime이 0보다 크다면 그대로 token을 발급하되, 0보다 작아질 경우, refreshAccessToken 함수를 실행시킨다.</li>\n<li>(4)에서 session에 return을 할 경우 useSession hooks를 통해 접근 가능한다. 그래서 이 경우엔 accessToken은 담아주되, refreshToken은 제거했다.</li>\n</ul>\n<br>\n<h3 id=\"session-token\" style=\"position:relative;\"><a href=\"#session-token\" aria-label=\"session token permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Session Token</h3>\n<p>Session Token은 로그인을 유지할지 로그아웃 시켜버릴지를 결정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// auth.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  session<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token operator\">:</span> <span class=\"token string\">'jwt'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Seconds - How long until an idle ses</span>\n    maxAge<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 30 days</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  debug<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>session Token은 위 session에서 관리하는데, maxAge는 s단위이다. 30일동안 session Token을 유지하도록 했다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SessionProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AuthContextProps</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> AuthContext<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>AuthContextProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 25일 이상 설정시 infinite loop 발생</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">REFRESH_AGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20 days</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SessionProvider</span></span> <span class=\"token attr-name\">refetchInterval</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">REFRESH_AGE</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">SessionProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AuthContext<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위와같이 AuthContext를 통해 SessionProvider를 정의하고, root layout에서 Lapping 해주었다.</li>\n<li>refresh_age를 20일로 설정했는데, 25일 이상으로 설정하면, 이상하게 무한루프에 빠져버린다.<br>\n(원인은 모르겠다… log를 찍으면 log가 무한히 찍혀버린다.)</li>\n</ul>\n<p>next-auth에선 <a href=\"https://next-auth.js.org/getting-started/client#refetch-interval\" target=\"_blank\" rel=\"nofollow\">Refetch interval</a>가 있다.<br>\npolling 처럼, 20일을 주기로 session Token을 재발급 받는다.\n또한, <a href=\"https://next-auth.js.org/getting-started/client#refetch-on-window-focus\" target=\"_blank\" rel=\"nofollow\">Refetch On Window Focus</a>도 존재한다. 이는 react-query와 유사하다. tab 또는 window를 전환했다가, 다시 해당 페이지로 focus하면 session이 재발급된다. 이는 network에서 확인할 수 있다.</p>\n<br>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<ul>\n<li>\n<p>next-auth<br>\n<a href=\"https://next-auth.js.org/\" target=\"_blank\" rel=\"nofollow\">Next-auth 공식문서</a><br>\n<a href=\"https://jeongyunlog.netlify.app/develop/nextjs/next-auth/\" target=\"_blank\" rel=\"nofollow\">Next-Auth를 사용하여 손쉽게 OAuth기반 권한관리하기 + RefreshToken + Private Route</a></p>\n</li>\n<li>\n<p>refresh-token<br>\n<a href=\"https://tecoble.techcourse.co.kr/post/2021-10-20-refresh-token/\" target=\"_blank\" rel=\"nofollow\">refresh token 도입기</a><br>\n여기서 언급한대로 라면, 시나리오 1번이라고 이해했다.</p>\n</li>\n<li>\n<p>token<br>\n<a href=\"https://velog.io/@yaytomato/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow\">🍪 프론트에서 안전하게 로그인 처리하기 (ft. React)</a><br>\n<a href=\"https://cloud.google.com/docs/authentication/token-types?hl=ko\" target=\"_blank\" rel=\"nofollow\">구글 토큰 유형</a><br>\n<a href=\"https://dev.to/mabaranowski/nextjs-authentication-jwt-refresh-token-rotation-with-nextauthjs-5696\" target=\"_blank\" rel=\"nofollow\">Next.js Authentication - JWT Refresh Token Rotation with NextAuth.js</a></p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#token\">Token</a></li>\n<li><a href=\"#refresh-token\">refresh token</a></li>\n<li><a href=\"#refresh-token%EC%9C%BC%EB%A1%9C-access-token-%EC%9E%AC%EB%B0%9C%EA%B8%89%EB%B0%9B%EA%B8%B0\">refresh Token으로 access Token 재발급받기</a></li>\n<li><a href=\"#session-token\">Session Token</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>","frontmatter":{"title":"next-auth token 관리하기-4","summary":"사용자에게 log-out 하게 만드는 상황을 만들지 말아보자!","date":"2023.09.10.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/9/10/next-auth/"}},"staticQueryHashes":["1629908903"]}