{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/9/7/프론트 에러 핸들링 하기/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<blockquote>\n<p>점차 한 프로덕트를 만들어갈 수록 중요하다고 생각되는 점이 크게 두 가지 있다.</p>\n</blockquote>\n<ol>\n<li>\n<p>첫 번째는 테스트코드이다.</p>\n<p>TDD를 하고 있진 않는데, 이런 상황이 생기면 꼭 테스트코드를 작성하려고 한다.<br>\n한 에러가 발생했는데, 이 에러가 어디서 발생했는지, 왜 발생했는지, 그리고 여러번 이 에러가 발생해서 수정해줬어야했을 때, 이럴 땐 꼭 테스트코드를 작성하려고 한다.</p>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>\n<p>두 번째는, 에러 분기처리다.</p>\n<p>기존에는 console.error로 로깅만 했었는데, 문구도 network is not working 정도로만 작성했다.\n<code class=\"language-text\">status</code>나 <code class=\"language-text\">message</code>를 따로 처리하지 않고 그저 string으로만 처리하는 상황이었다.\n그 후, 같은 에러 문구가 여러 곳에서 뜨니 어디가 어딘지 알 수가 없었다.\n그래서 에러를 한 번 정리해줄 필요성이 있었고, 이 글을 쓰게 됐다.</p>\n</li>\n</ol>\n<br>\n<p>먼저 현재 사용하고 있는 기술스택은 다음과 같다</p>\n<ul>\n<li>next.js, app dir</li>\n<li>tanstack-query</li>\n<li>Errorboundary</li>\n</ul>\n<p>먼저 프론트 에러처리부터 작성해보려고 한다.</p>\n<h3 id=\"onsuccess와-onerror\" style=\"position:relative;\"><a href=\"#onsuccess%EC%99%80-onerror\" aria-label=\"onsuccess와 onerror permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>onSuccess와 onError</h3>\n<p>다음의 글을 참고했다.</p>\n<p><a href=\"https://tkdodo.eu/blog/status-checks-in-react-query\" target=\"_blank\" rel=\"nofollow\">Status Checks in React Query</a><br>\n<a href=\"https://tkdodo.eu/blog/react-query-error-handling\" target=\"_blank\" rel=\"nofollow\">React Query Error Handling</a><br>\n<a href=\"https://velog.io/@cnsrn1874/breaking-react-querys-api-on-purpose\" target=\"_blank\" rel=\"nofollow\">[번역] React Query API의 의도된 중단</a></p>\n<p>순서대로 읽는 걸 권하고 싶다.<br>\n맨 마지막 글을 읽으며, tanstack-query v5에선 <code class=\"language-text\">onError</code>, <code class=\"language-text\">onSuccess</code>, <code class=\"language-text\">onSettled</code>가 없어졌다는 것을 알게 됐다.<br>\n사실 알게 된건 몇 달 전이었던 것 같은데, <code class=\"language-text\">문제에 직면하지 않아서</code> 따로 찾아보지 않았다.<br>\n당시엔 <code class=\"language-text\">server component</code>에 대한 문제를 해결하기 바빴다.</p>\n<br>\n<p>그래서 먼저, useQuery 내에서 onSuccess와 onError를 제거해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// useRecordGetQuery.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  userEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> encodedEmail <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>userEmail <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_SERVER_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/api/record/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedEmail<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'메세지를 가져오는 getMessage에서 오류가 발생했어요.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useRecordGetQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  userEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>recordManagerKeys<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">,</span> userEmail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      enabled<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>userEmail<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">select</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Message<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>decodeMessages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>사실 여기선 <code class=\"language-text\">select</code>를 사용하고 있는데, 이 또한 <code class=\"language-text\">onSuccess</code>와 유사하기 때문에 <code class=\"language-text\">onSuccess</code>라고 생각하고 작성한다.</li>\n<li>참고로 useQuery 내에 callback만 제거된다. <strong>useMutation에선 콜백에 여전히 존재한다.</strong></li>\n<li>useMutation에서 onSuccess는 invalidateQueries를 무효화할 때 필수적이기 때문에 제거하면, tanstack-query를 사용할 이유가 많이 사라질 것이라고 개인적으로 생각한다..!</li>\n</ul>\n<br>\n<p>먼저 useQuery 내에서 Error부터 처리해주려고한다.<br>\nfetch API를 사용하고 있어서, <code class=\"language-text\">if(!res.ok)</code>와 같이 따로 분기처리를 해주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// useRecordGetQuery.ts</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> status<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  userEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> encodedEmail <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>userEmail <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_SERVER_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/api/record/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedEmail<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러 처리는 다음과 같이 수정했다. api 서버에서 에러를 message와 status를 보내주도록 수정했다.</span>\n    <span class=\"token comment\">// 그리고 throw new FetchError로 에러를 던져주었다.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">,</span> status <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FetchError</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> decodedData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>decodeMessages<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여기서 select 부분을 제거할 수 있다.</span>\n\n  <span class=\"token keyword\">return</span> decodedData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useRecordGetQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  userEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>recordManagerKeys<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">,</span> userEmail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      enabled<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>userEmail<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위와 같이 수정해서 onSuccess와 onError를 제거해주었다.</li>\n<li>여기서 onError는 조금 더 알아보자.</li>\n</ul>\n<br>\n<h3 id=\"tanstack-query-global-error\" style=\"position:relative;\"><a href=\"#tanstack-query-global-error\" aria-label=\"tanstack query global error permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tanstack-query global Error</h3>\n<ul>\n<li>\n<p><a href=\"https://tkdodo.eu/blog/react-query-error-handling#putting-it-all-together\" target=\"_blank\" rel=\"nofollow\">위 글</a>에서 React-query는 크게 세 가지로 에러를 처리할 수 있다고 제시한다.</p>\n<ol>\n<li>useQuery 내에서 오류 반환</li>\n<li>onError callback (query 자체에서 또는, QueryCache, MutationCache)</li>\n<li>ErrorBoundary로 처리</li>\n</ol>\n</li>\n</ul>\n<br>\n<p>일단 여기서 나는, 1번은 내키지 않았다. onError가 없어지는 시점에선 <a href=\"https://tkdodo.eu/blog/breaking-react-querys-api-on-purpose#defining-on-demand-messages\" target=\"_blank\" rel=\"nofollow\">meta 필드를 이용해서 Error를 처리할 수 있다.</a><br>\n하지만, 별도 에러를 분기처리하는 경우는 크게 없었고, 서버에서 status와 message를 온전히 QueryCache와, MutationCache에서 처리해주길 바랐다.<br>\n그래서 다음과 같이 구성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MutationCache<span class=\"token punctuation\">,</span> QueryCache<span class=\"token punctuation\">,</span> QueryClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> toast <span class=\"token keyword\">from</span> <span class=\"token string\">'react-hot-toast'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">queryErrorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createQueryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  queryCache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>meta<span class=\"token operator\">?.</span>errorMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 만약 meta field를 사용한다면 여기서 tracking 할 수 있다.</span>\n        <span class=\"token function\">queryErrorHandler</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>meta<span class=\"token operator\">?.</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">queryErrorHandler</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  mutationCache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> _variables<span class=\"token punctuation\">,</span> _context<span class=\"token punctuation\">,</span> mutation<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">queryErrorHandler</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>onError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">queryErrorHandler</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  defaultOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    queries<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n      suspense<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 참고로 suspense를 true로 설정하면 useErrorBoundary도 true가 된다.</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>예전 유데미에서 제공하는 react-query 강의에선 defaultOptions에 onError를 설정해주었었다.</li>\n<li>하지만, tkdodo 형님의 블로그를 확인하면, QueryCache와 MutationCache에 onError를 설정해야한다고 제시한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// TkDodo 형님의 블로그 댓글 중\nNo, the default options you provide are merged with the default options,\nso unless you set refetchOnWindowFocus to false, it will stay on.\n\nFurther, this is not the way to provide a global onError handler.\nAs the article tried to explain,\nyou have to set onError on the QueryCache or the MutationCache for a truly global handler.</code></pre></div>\n<br>\n<h3 id=\"errorboundary-사용하기\" style=\"position:relative;\"><a href=\"#errorboundary-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"errorboundary 사용하기 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ErrorBoundary 사용하기</h3>\n<p>우리는 try…catch를 왜 사용할까? 사실 이 전까지 나는 try…catch가 단지 에어를 catch해 주는 용도로’만’ 존재하는줄 알았다.<br>\n하지만 try…catch로 감싸줬을 때, 에러가 떠도, 에러문을 catch에서 잡아주고, 애플리케이션은 계속 유지되도록 해준다.<br>\n즉, 사용자 경험을 훨씬 더 좋게 만들어주기 때문에 try…catch를 쓰는 것이었다. 쓰지 않는다면, 유저는 갑자기 에러문도 보고, 애플리케이션도 다운되어버린다.</p>\n<br>\n<p>근데 여기서 한 발 더 나아가, try..catch를 선언적으로 사용할 수 있게 해주는 <a href=\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\" target=\"_blank\" rel=\"nofollow\">ErrorBoundary가 존재한다.</a><br>\n하지만, 이는 오직 Class로만 제공해주고 있는데, <a href=\"https://github.com/bvaughn/react-error-boundary\" target=\"_blank\" rel=\"nofollow\">react-error-boundary</a>라는 라이브러리는 훨씬 더 ErrorBoundary를 편하게 사용할 수 있게 해준다.<br>\n나의 경우 app 디렉토리를 사용하고 있어서 다음과 같은 보일러플레이트 작업을 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// components/common/ErrorBoundaryContext.tsx</span>\n<span class=\"token string\">'use client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ErrorBoundaryContextProps</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> componentStack<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'에러 정보를 로깅해요!'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorFallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> resetErrorBoundary<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> FallbackProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isNotAuthorized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">resetErrorBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flex h-screen flex-col items-center justify-center bg-gray-100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mb-4 text-6xl font-bold text-gray-500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">404</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rounded bg-yellow-400 px-4 py-2 text-white hover:bg-yellow-300 focus:border-blue-700 focus:outline-none focus:ring focus:ring-blue-200<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClickHandler<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>buttonMessage<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorBoundaryContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ErrorBoundaryContextProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryErrorResetBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span>\n      <span class=\"token attr-name\">onReset</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onError</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>logError<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">FallbackComponent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ErrorFallback<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ErrorBoundaryContext<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이를 layout 가장 바깥쪽에서 래핑해주었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// app/layout.tsx</span>\n<span class=\"token keyword\">import</span> ErrorBoundaryContext <span class=\"token keyword\">from</span> <span class=\"token string\">'components/client/common/ErrorBoundaryContext'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">RootLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">suppressHydrationWarning</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>notoSansKR<span class=\"token punctuation\">.</span>className<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundaryContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> // 감싸주었다.\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AuthContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toaster</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChakraContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                  </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChakraContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AuthContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">QueryContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundaryContext</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 여기서 한 단계 더 나아가고 싶다.</p>\n<br>\n<h3 id=\"에러-핸들링-분기처리하기\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81-%EB%B6%84%EA%B8%B0%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"에러 핸들링 분기처리하기 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 핸들링 분기처리하기</h3>\n<p>음… 400번대 에러는 보통 client error를 처리한다.\n예전 인프런에서 <a href=\"https://www.inflearn.com/course/http-%EC%9B%B9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\" target=\"_blank\" rel=\"nofollow\">모든 개발자를 위한 HTTP 웹 기본 지식</a>을 수강할 때 간단히 <a href=\"https://github.com/Geuni620/TIL/blob/main/HTTP/HTTP%20%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C.md#4xx%EB%B2%88%EB%8C%80-5xx%EB%B2%88%EB%8C%80\" target=\"_blank\" rel=\"nofollow\">정리해 놓은 것</a>을 참고하면, 400번대는 클라이언트 에러, 500번대는 서버에러를 의미한다.</p>\n<p>그래서 이를 조금 분기처리하고 싶었다.</p>\n<ul>\n<li>\n<p>클라이언트에러? → 이건 사용자가 알아야할 에러겠지? 이메일을 잘못입력 했을 수도 있고, 비밀번호가 틀릴 수도 있으니 말이다.</p>\n<ul>\n<li>하지만, ErrorBoundary에서 처리하고 싶지 않다. ErrorBoundary에서 처리한다면 404 페이지 같은 <code class=\"language-text\">FallbackComponent</code>가 실행되는데, 이는 사용자에게 알려주기에는 너무 무겁다.</li>\n<li>그래서 이 에러는 toast로만 사용자에게 알려주고 싶었다. 즉, 기존 페이지는 유지되었으면 한다.</li>\n<li>예를 들어 record 페이지에서 메시지를 불러온 상태에서 userEmail이 없다고 가정해보면, userEmail 없다는 toast를 띄우고, record 페이지는 유지되길 바랐다.</li>\n<li>또 이렇게 한 이유가, tanstack-query는 refetch가 빈번히 발생한다. 즉, stale 된 데이터라도, 유지된 상태에서, 다음 refresh 한 데이터의 요청이 실패했을 때, 404페이지로 이동하는게 아니라, stale한 데이터라도 보여주고, toast로 사용자에게 에러가 발생했음을 알려주고 싶었다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>그럼 500번대 에러는? → 이것 또한 사용자에게 알려주어야한다.</p>\n<ul>\n<li>하지만, 이는 서버쪽에서 발생했을 가능성이 높다. 예를 들어 서버가 다운되었을 경우가 있을 것 같다.</li>\n<li>그럼 이때 <code class=\"language-text\">FallbackComponent</code>가 실행되어 user에서 404페이지를 띄워주고 싶었고, 이를 위해 ErrorBoundary에서 처리하고 싶었다.</li>\n<li>그리고 404페이지에 마찬가지로 어떤 상태메시지 오류인지 알려주고 싶었다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// queryClient</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createQueryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  defaultOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    queries<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      suspense<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 여기</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이를 위해 위에서도 잠깐 언급했지만, useErrorBoundary true가 되어있거나, suspense가 true가 되어있어야한다.</li>\n<li>그리고 useQuery내에서 useErrorBoundary를 다음과 같이 처리해주었다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// useRecordGetQuery.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useRecordGetQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  userEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>recordManagerKeys<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">,</span> userEmail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">useErrorBoundary</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 500번대 이상 에러가 발생하면, ErrorBoundary에서 처리, 500 미만이라면, 위에서 보여준 toast로만 처리</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> messages <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>참고로 ErrorBoundary에서는 비동기 함수 / 이벤트 리스너 / 서버사이드렌더링 / 에러바운더리 자체에서 발생하는 에러는 잡지 못한다.</li>\n<li>그럼에도 불구하고 비동기 함수, 즉 tanstack-query에서 발생하는 에러는 어떻게 처리할 수 있는걸까?</li>\n<li>이는 위에 코드에서 볼 수 있듯이, suspense를 true로 설정하거나, useErrorBoundary를 true로 설정했기 때문이다.</li>\n<li>그리고 useQuery 인자내에서 useErrorBoundary의 특정 조건을 다음과 같이 처리해주면, ErrorBoundary에서 처리할 수 있다.</li>\n</ul>\n<br>\n<h3 id=\"그-외\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-label=\"그 외 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외.</h3>\n<ul>\n<li>meta field를 적용하는 방법은 다음과 같다.<br>\n<a href=\"https://tkdodo.eu/blog/breaking-react-querys-api-on-purpose#defining-on-demand-messages\" target=\"_blank\" rel=\"nofollow\">Defining on-demand messages</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useRecordGetQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  userEmail<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>recordManagerKeys<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">,</span> userEmail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        errorMessage<span class=\"token operator\">:</span> <span class=\"token string\">'이게 있다면 실패한 에러가 작성되겠죠.'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이렇게 하면 위의 query.meta?.errorMessage에서 읽힌다.</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<ul>\n<li>\n<p>ChakraUI의 toast가 있는데도 불구하고 react-hot-toast를 사용한 이유</p>\n<ul>\n<li>위 <code class=\"language-text\">layout.tsx</code>를 보면 ChakraContext가 존재한다. 즉 ChakraUI의 toast를 사용할 수 있다.</li>\n<li>하지만 queryClient에선 Chakra(이하 차크라)를 사용할 수 없었다.</li>\n<li>그 이유는 QueryClinet를 useState내에 넣어주게 되는데, 차크라 UI 같은 경우는 toast를 불러오기 위해 useToast hooks를 제공한다.</li>\n<li>useState내에 useHooks가 들어가면 에러가 발생했다. 즉, react-hot-toast를 임의로 적용해주었다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li>최대한 정확하게 적어보려고 했다.\n혹시나, 잘못된 부분이 있다면 <code class=\"language-text\">dlrmsgnl0823@gmail.com</code>으로 꼭 연락주시길 바랍니다. 🙇‍♂️</li>\n</ul>\n<br>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p>훨씬훨씬 많은데, 회사 탭에 열어놓은게 있어서 내일 업데이트 해야겠다..!</p>\n<ul>\n<li>TKDODO 블로그<br>\n<a href=\"https://tkdodo.eu/blog/status-checks-in-react-query\" target=\"_blank\" rel=\"nofollow\">Status Checks in React Query</a><br>\n<a href=\"https://tkdodo.eu/blog/react-query-error-handling\" target=\"_blank\" rel=\"nofollow\">React Query Error Handling</a><br>\n<a href=\"https://velog.io/@cnsrn1874/breaking-react-querys-api-on-purpose\" target=\"_blank\" rel=\"nofollow\">[번역] React Query API의 의도된 중단</a></li>\n</ul>\n<br>\n<ul>\n<li>그 외 도움 주신 글<br>\n<a href=\"https://tech.kakaopay.com/post/react-query-2/\" target=\"_blank\" rel=\"nofollow\">React Query와 함께 Concurrent UI Pattern을 도입하는 방법</a><br>\n<a href=\"https://www.datoybi.com/error-handling-with-react-query/\" target=\"_blank\" rel=\"nofollow\">React Error Boundary를 사용하여 에러 핸들링하기(react-query)</a><br>\n<a href=\"https://yiyb-blog.vercel.app/posts/error-boundary-with-react-query\" target=\"_blank\" rel=\"nofollow\">Error Boundary, React-Query와 함께 사용해보기</a><br>\n<a href=\"https://fe-developers.kakaoent.com/2022/221110-error-boundary/\" target=\"_blank\" rel=\"nofollow\">React의 Error Boundary를 이용하여 효과적으로 에러 처리하기</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#onsuccess%EC%99%80-onerror\">onSuccess와 onError</a></li>\n<li><a href=\"#tanstack-query-global-error\">tanstack-query global Error</a></li>\n<li><a href=\"#errorboundary-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">ErrorBoundary 사용하기</a></li>\n<li><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81-%EB%B6%84%EA%B8%B0%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">에러 핸들링 분기처리하기</a></li>\n<li><a href=\"#%EA%B7%B8-%EC%99%B8\">그 외.</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>","frontmatter":{"title":"프론트 에러 핸들링하기","summary":"next.js app dir, tanstack-query, Errorboundary를 이용해서 에러를 핸들링해보자.","date":"2023.09.07.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/9/7/프론트 에러 핸들링 하기/"}},"staticQueryHashes":["1629908903"]}