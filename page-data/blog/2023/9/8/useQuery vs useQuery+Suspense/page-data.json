{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2023/9/8/useQuery vs useQuery+Suspense/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<blockquote>\n<p>useQuery에선 isLoading을 return 해준다.<br>\nSuspense에서도 Promise가 pending 상태라면, fallback을 보여준다.<br>\n그럼 useQuery만 사용했을 때와, useQuery와 Suspense를 사용했을 때 어떤 게 더 빨리 Loading UI를 사용자에게 보여줄 수 있을까?</p>\n</blockquote>\n<br>\n<p>하나의 가정이 필요하다.</p>\n<ul>\n<li>네트워크 속도 동일하다.</li>\n</ul>\n<br>\n<p>처음 이 주제에 대해 궁금하기 시작한 건 동료개발자분 덕이다.<br>\n내가 만들고 있는 서비스에서 Nav에 user가 sign-up할 때 작성했던 데이터를 불러와서 보여줘야하는 부분이 있었다.<br>\n<code class=\"language-text\">UserInfoNav</code>라는 컴포넌트에 작성했는데, Suspense로 감싸서 fallback ui를 적용했는데, 다음과 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// UserInfoNav.tsx</span>\n<span class=\"token keyword\">const</span> UserInfoNav<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isUrlRecord <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> session <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> giRokEInfo<span class=\"token punctuation\">,</span> isLoading <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useGiRokEInfoGetQuery</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">?.</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoading<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-base font-medium leading-6 tracking-tighter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-base font-medium leading-6 tracking-tighter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isUrlRecord <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Image</span></span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dashboard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>temp-icon/arrow.svg<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arrow-icon<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>session<span class=\"token operator\">?.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">의 기록이 </span><span class=\"token punctuation\">{</span>giRokEInfo<span class=\"token operator\">?.</span>giRokEName<span class=\"token punctuation\">}</span><span class=\"token plain-text\">의 집\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UserInfoNav<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>여기선 useQuery에서 return해주는 isLoading으로 처리해주었다.</li>\n<li>그 이유는, Suspense로 감싸주었을 때, fallback ui를 보여주어야하는데 이게 동작하지 않는다.</li>\n<li>해당 부분에서 <code class=\"language-text\">useGiRokEInfoGetQuery</code> hooks는 서버에 데이터를 요청하기 때문에 Promise를 return하는데도 불구하고 동작하지 않는다.</li>\n<li><strong>아직 원인 파악 중이다…</strong></li>\n</ul>\n<br>\n<p>어쨌든, 위 내용을 동료개발자분께 공유드리는데, 동료개발자 분이 Suspense를 사용하는 이유가 “fallback ui를 보여주기 위해서’만’ 있는 건 아니다.”<br>\n“data의 fetching 시점을 더 빨리 가져가기 위함이다.”라고 말씀하신게 흥미를 불러일으켰다.</p>\n<br>\n<p>지금 이 글은 제목에서도 적혀있듯, ‘useQuery와 useQuery+Suspense 중 어떤게 loading UI를 사용자에게 더 빨리 보여줄 수 있을까?’ 이다.\n처음 나의 흥미를 불러 일으킨, ‘data의 fetching 시점은 어떤게 더 빠를까?‘였는데, 탐구하다보니, 기준을 위와 같이 잡게 됐다.</p>\n<br>\n<p><del>당시 탐구할 땐 같은 주제라고 생각했는데, 지금와서 생각해보니 data의 fetching 시점은 다른 주제인 것 같다.</del>\n<del>data fetching 시점은 useQuery를 사용하기 때문에 어쨌든 동일할 것이라는 생각이 든다. (개인적인 생각이다)</del></p>\n<br>\n<p>그리고 탐구하다보니 알게 된 사실인데, react-query가 존재하기 전에는 useEffect를 사용해서 data fetching 했다.(고 한다.)<br>\n‘useEffect와 useQuery 둘 중 data의 fetching 시점은 어떤게 더 빠를까?’<br>\nuseEffect와 useQuery 내부 동작이 어떤지는 찾아보지 않아서 잘 모르겠지만, 둘이 실행되는 시점은 <strong>동일</strong>하다.\n즉, mount 된 후에 useQuery도 useEffect도 실행된다.</p>\n<br>\n<h3 id=\"suspense\" style=\"position:relative;\"><a href=\"#suspense\" aria-label=\"suspense permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suspense</h3>\n<p>다시 본론으로 돌아와서, useQuery만 사용했을 때와 useQuery+Suspense를 사용했을 때 어떤게 더 빠를까?\nSuspense 내부 코드를 먼저 확인해보고 싶었다.</p>\n<p><a href=\"https://blog.logrocket.com/data-fetching-react-suspense/\" target=\"_blank\" rel=\"nofollow\">Data fetching with React Suspense</a></p>\n<p>위 글에선 Suspense 내부 동작을 <strong>참고용</strong>으로 구현해 놓은 코드가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// wrapPromise.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">wrapPromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> response<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> suspender <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      status <span class=\"token operator\">=</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">;</span>\n      response <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      status <span class=\"token operator\">=</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">;</span>\n      response <span class=\"token operator\">=</span> err<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">read</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">throw</span> suspender<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">throw</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> read <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> wrapPromise<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fetchData.ts</span>\n<span class=\"token keyword\">import</span> wrapPromise <span class=\"token keyword\">from</span> <span class=\"token string\">'./wrapPromise'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wrapPromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> fetchData<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// https://velog.io/@imnotmoon/React-Suspense-ErrorBoundary-%EC%A7%81%EC%A0%91-%EB%A7%8C%EB%93%A4%EA%B8%B0</span>\n<span class=\"token comment\">// https://velog.io/@seeh_h/suspense%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC</span>\n<span class=\"token comment\">// 두 블로그에서 코드를 참고했다 🙇‍♂️</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SuspenseProps</span> <span class=\"token punctuation\">{</span>\n  fallback<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SuspenseState</span> <span class=\"token punctuation\">{</span>\n  pending<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i <span class=\"token keyword\">is</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> i <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> i<span class=\"token punctuation\">.</span>then <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Suspense</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span>\n  SuspenseProps<span class=\"token punctuation\">,</span>\n  SuspenseState\n<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> mounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> state<span class=\"token operator\">:</span> SuspenseState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    pending<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pending<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      err\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pending<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> err <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Suspense Error\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pending <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pending <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>fallback <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 코드에서 확인할 수 있듯이, Suspense 내부에서는 Promise를 확인한다.</li>\n<li>그리고 Promise가 pending 상태라면, pending을 true로 설정하고 fallback ui를 보여주는 것이다.</li>\n<li>여기서 핵심은 ErrorBoundary로 error를 throw하듯이, suspense로 <strong>Promise를 throw하고 Suspense에서 Promise를 받아서 상태를 확인한다는 것</strong>이다.</li>\n</ul>\n<br>\n<h3 id=\"usequery\" style=\"position:relative;\"><a href=\"#usequery\" aria-label=\"usequery permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useQuery</h3>\n<p>그럼 궁금한게 하나 생긴다.\n<strong>useQuery는 대체 언제 실행될까?</strong></p>\n<p><a href=\"https://velog.io/@hyunjine/Inside-React-Query\" target=\"_blank\" rel=\"nofollow\">Inside React Query 번역본</a><br>\n<a href=\"https://tkdodo.eu/blog/inside-react-query\" target=\"_blank\" rel=\"nofollow\">Inside React Query</a></p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">the component mounts, it calls useQuery, which creates an Observer.\n컴포넌트가 마운트되면 Observer를 생성하는 useQuery를 호출합니다.</code></pre></div>\n<ul>\n<li>useQuery는 컴포넌트가 마운트 되면 실행된다.</li>\n<li>즉, 컴포넌트 맨 위 코드부터 쭉 읽어가다가, return 부분에 ’<div>‘태그들을 모두 그리고 난 후 useQuery가 실행되는 것이다.</li>\n</ul>\n<p>아하… 명확해졌다.</p>\n<br>\n<h3 id=\"여기서-잠깐만\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%9E%A0%EA%B9%90%EB%A7%8C\" aria-label=\"여기서 잠깐만 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여기서 잠깐만.</h3>\n<ul>\n<li>그럼 suspense는 컴포넌트 마운트 되기 전, 컴포넌트를 그리는 단계에서 promise를 catch 하는게 맞나?</li>\n<li>react 실행되는 생명주기는 어떻게 되는 걸까?</li>\n<li>react-query 내부는 어떻게 동작할까?</li>\n<li>react의 hooks는 어떻게 동작하지? 이게 schedule와 연관된 걸까?</li>\n</ul>\n<br>\n<p>이런 궁금증이 남는다.\n잠깐 찾아본 결과 궁금증의 해답을 제시하는 글을 발견했다.</p>\n<p><a href=\"https://programmerplum.tistory.com/179#toc-Suspense\" target=\"_blank\" rel=\"nofollow\">[React] React-Query와 Suspense</a><br>\n<a href=\"https://maxkim-j.github.io/posts/suspense-argibraic-effect/\" target=\"_blank\" rel=\"nofollow\">Suspense for Data Fetching의 작동 원리와 컨셉 (feat.대수적 효과)</a></p>\n<ul>\n<li>위 두 글을 통해서 ‘그럼 suspense는 컴포넌트 마운트 되기 전, 컴포넌트를 그리는 단계에서 promise를 catch 하는게 맞나?‘의 정답을 찾았다!</li>\n</ul>\n<br>\n<ul>\n<li>suspense로 감싸진 컴포넌트(예를 들어 <UserInfoNav/>)가 렌더링을 시도한다.</li>\n<li>내부에서 useQuery는 어떠한 resource에 의해 감싸지게 될텐데, 이게 위에서 본 wrapPromise이다.</li>\n<li>이 wrapPromise는 read()를 호출한 후, 데이터가 들어오기 전이라면, 컴포넌트 렌더링을 정지한다.</li>\n<li>그리고 react는 이 컴포넌트를 패스하고 다른 컴포넌트를 렌더링 시도한다.</li>\n<li>렌더링 시도할 컴포넌트가 남아있지 않을 경우, 컴포넌트 트리 상에서 존재하는 것 중 가장 가까운 Suspense(여기선 다시 정지한 컴포넌트(<UserInfoNav/>)의 가장 가까운 Suspense)의 fallback ui를 찾는다.</li>\n</ul>\n<br>\n<ul>\n<li>즉 컴포넌트를 렌더링하는 단계에서 promise를 catch하는 것이 맞다.</li>\n<li>그리고 위에서 개인적인 생각이라고 말했던 부분도, 정정이 필요하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">당시 탐구할 땐 같은 주제라고 생각했는데, 지금와서 생각해보니 data의 fetching 시점은 다른 주제인 것 같다.\ndata fetching 시점은 useQuery를 사용하기 때문에 어쨌든 동일할 것이라는 생각이 든다. (개인적인 생각이다)</code></pre></div>\n<ul>\n<li>위 부분 역시 Suspense를 적용함으로써, 응답을 기다리며 명령형으로 코드를 작성할 필요가 없어졌다.</li>\n<li>즉, useQuery의 isLoading과 같은 값을 리턴할 이유도 없어졌으니, 코드가 줄어들고, 비동기 데이터의 표시는 더 빨라질 것이라고 추측된다.</li>\n</ul>\n<br>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<ul>\n<li>suspense + useQuery가 loading 시점도 빨리 보여준다.</li>\n<li>suspense + useQuery가 data의 fetching 시점도 빨리 가져간다.</li>\n</ul>\n<br>\n<p>아직 해결하지 못한 궁금증들</p>\n<ul>\n<li>react 실행되는 생명주기는 어떻게 되는 걸까?</li>\n<li>react-query 내부는 어떻게 동작할까?</li>\n<li>react의 hooks는 어떻게 동작하지? 이게 schedule와 연관된 걸까?</li>\n</ul>\n<p>아래 세 가지는 react에 관련된 내용이니, 또 다음 주제를 통해 블로그를 작성해야겠다.</p>\n<br>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"headerElement before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p>suspense<br>\n<a href=\"https://youtu.be/FvRtoViujGg?si=rixcZx7yBijQ7Orq\" target=\"_blank\" rel=\"nofollow\">토스ㅣSLASH 21 - 프론트엔드 웹 서비스에서 우아하게 비동기 처리하기</a></p>\n<p><a href=\"https://gist.github.com/sebmarkbage/2c7acb6210266045050632ea611aebee\" target=\"_blank\" rel=\"nofollow\">sebmarkbage SynchronousAsync.js</a></p>\n<p><a href=\"https://fe-developers.kakaoent.com/2021/211127-211209-suspense/\" target=\"_blank\" rel=\"nofollow\">Suspense와 선언적으로 Data fetching처리</a></p>\n<p><a href=\"https://maxkim-j.github.io/posts/suspense-argibraic-effect/\" target=\"_blank\" rel=\"nofollow\">Suspense for Data Fetching의 작동 원리와 컨셉 (feat.대수적 효과)</a></p>\n<p><a href=\"https://lasbe.tistory.com/160\" target=\"_blank\" rel=\"nofollow\">Suspense을 사용해 선언적으로 로딩 화면 구현하기</a></p>\n<p><a href=\"https://velog.io/@seeh_h/suspense%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" target=\"_blank\" rel=\"nofollow\">Suspense의 동작 원리</a></p>\n<p><a href=\"https://www.daleseo.com/react-suspense/\" target=\"_blank\" rel=\"nofollow\">React Suspense 소개 (feat. React v18)</a></p>\n<br>\n<p>react-query<br>\n<a href=\"https://velog.io/@hyunjine/Inside-React-Query\" target=\"_blank\" rel=\"nofollow\">Inside React Query 번역본</a><br>\n<a href=\"https://tkdodo.eu/blog/inside-react-query\" target=\"_blank\" rel=\"nofollow\">Inside React Query</a></p>\n<br>","tableOfContents":"<ul>\n<li><a href=\"#suspense\">Suspense</a></li>\n<li><a href=\"#usequery\">useQuery</a></li>\n<li><a href=\"#%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%9E%A0%EA%B9%90%EB%A7%8C\">여기서 잠깐만.</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>","frontmatter":{"title":"useQuery와 useQuery+Suspense 중 어떤게 loading UI를 사용자에게 더 빨리 보여줄 수 있을까?","summary":"어떤 게 사용자에게 더 빠르게 Loading UI라도 먼저 보여줄 수 있을까?","date":"2023.09.08.","categories":["개발"]}}}]}},"pageContext":{"slug":"/blog/2023/9/8/useQuery vs useQuery+Suspense/"}},"staticQueryHashes":["1629908903"]}