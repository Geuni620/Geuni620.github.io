{"version":3,"file":"component---src-templates-post-template-tsx-3f6da52bad5615a8b621.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/hooks/scroll-spy.ts","webpack://gatsby-starter-default/./src/components/Post/TableOfContents.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0px 60px 0px;\n  color: #ffffff;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Title = styled.div`\n  margin-top: 20px;\n  color: black;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 28px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: black;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail?: IGatsbyImageData\n}\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n`\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MARGIN_BOTTON = '1.5rem'\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding-bottom: 50px;\n  word-break: break-all;\n\n  // Markdown Style\n  font-size: 18px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n    margin-bottom: ${MARGIN_BOTTON};\n    line-height: 1.6em;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: ${MARGIN_BOTTON};\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 0.5rem;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 50px;\n  }\n\n  h2 {\n    font-size: 40px;\n  }\n\n  h3 {\n    font-size: 30px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    padding: 20px;\n    border-left: 5px solid #a3aaae;\n    font-weight: 400;\n    font-style: normal;\n    line-height: 28px;\n    font-size: 18px;\n    color: #000;\n    background-color: #f7f7f7;\n    margin-bottom: ${MARGIN_BOTTON};\n\n    p {\n      margin: 10px 0;\n    }\n  }\n\n  ol,\n  ul {\n    margin-bottom: ${MARGIN_BOTTON};\n    margin-left: 20px;\n  }\n\n  // Hide markers for list items with checkboxes\n  ul > li:has(input[type='checkbox']) {\n    list-style: none;\n  }\n\n  // 체크박스 스타일일 경우 margin-left 0으로 간격 유지\n  .contains-task-list {\n    margin-left: 0;\n  }\n\n  li {\n    margin-bottom: 0.5em;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid rgb(233, 236, 239);\n    margin-bottom: 48px;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #0687f0;\n    font-weight: 500;\n    transition: all 0.3s ease-in-out;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n\n  pre[class*='language-'] {\n    margin: 0 0 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    /* ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    } */\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n    font-size: 14px;\n  }\n\n  li,\n  p {\n    code {\n      color: #eb5757;\n      background-color: hsla(44, 6%, 50%, 0.15);\n    }\n  }\n\n  figcaption {\n    font-size: 14px;\n    margin-top: 5px;\n    text-align: center;\n    color: #888;\n  }\n\n  p {\n    strong {\n      font-weight: 700;\n    }\n  }\n\n  input[type='checkbox'] {\n    width: 18px;\n    height: 18px;\n    vertical-align: middle;\n\n    margin-right: 5px;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'Geuni620/Geuni620.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <div ref={element} />\n}\n\nexport default CommentWidget\n","export default class ScrollSpy {\n  public targets: HTMLElement[]\n  public refs: HTMLElement[]\n  public sensitivity: number\n\n  constructor(target: HTMLElement, refs: HTMLElement[], sensitivity?: number) {\n    this.targets = Array.from(target.querySelectorAll('a'))\n    this.refs = refs\n    this.sensitivity = sensitivity || -10\n\n    window.addEventListener('scroll', () => this.onScroll())\n  }\n\n  onScroll() {\n    if (!this.isOnTopOfDoc(this.refs[0])) {\n      this.deactiveateTarget()\n    }\n\n    this.refs.forEach(ref => {\n      if (this.isOnTopOfDoc(ref)) {\n        this.deactiveateTarget()\n        const t = this.findTarget(ref.id)\n        if (t) {\n          this.activate(t)\n        }\n      }\n    })\n  }\n\n  isOnTopOfDoc(ref: HTMLElement): boolean {\n    return (\n      document.documentElement.scrollTop - ref.offsetTop >= this.sensitivity\n    )\n  }\n\n  deactiveateTarget() {\n    this.targets.forEach(a => this.deactivate(a))\n  }\n\n  findTarget(id: string): HTMLElement | undefined {\n    return this.targets.filter(\n      a =>\n        decodeURIComponent(a.attributes['href'].value.replace(/^#/, '')) === id,\n    )[0]\n  }\n\n  activate(el: HTMLElement) {\n    el.classList.add('active')\n  }\n\n  deactivate(el: HTMLElement) {\n    el.classList.remove('active')\n  }\n}\n","import React, { useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport ScrollSpy from 'hooks/scroll-spy'\n\ninterface TableOfContentElement {\n  contents: any\n}\n\nconst TableOfContents: React.FC<TableOfContentElement> = ({ contents }) => {\n  useEffect(() => {\n    const headers = Array.from(document.querySelectorAll('h1, h2, h3')).filter(\n      (h: any) => h.id,\n    )\n\n    const toc = document.querySelector('#post-toc')\n    new ScrollSpy(toc as HTMLElement, headers as HTMLElement[])\n  }, [])\n\n  return (\n    <Layout>\n      <Contents id=\"post-toc\" dangerouslySetInnerHTML={{ __html: contents }} />\n    </Layout>\n  )\n}\n\nexport default TableOfContents\n\nconst Layout = styled.aside`\n  width: 300px;\n  position: sticky;\n  top: 0;\n  right: 0;\n  padding-top: 130px;\n  margin-left: 5rem;\n  overflow: auto;\n\n  @media (max-width: 1300px) {\n    display: none;\n  }\n`\n\nconst Contents = styled.div`\n  position: sticky;\n  border-left: 2px solid #ddd8d8;\n  background-color: white;\n  user-select: none;\n\n  ul {\n    color: gray;\n    padding-left: 1rem;\n    list-style: none;\n    line-height: 24px;\n    scale: 1;\n\n    & .active {\n      color: black;\n      font-weight: 700;\n    }\n  }\n`\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport styled from '@emotion/styled'\n\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport TableOfContents from 'components/Post/TableOfContents'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    tableOfContents: string\n    frontmatter: PostFrontmatterType\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: { title, summary, date, categories },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href}>\n      <Layout>\n        <Post>\n          <PostHead title={title} date={date} categories={categories} />\n          <PostContent html={html} />\n        </Post>\n        <TableOfContents contents={tableOfContents} />\n      </Layout>\n\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nconst Layout = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n`\n\nconst Post = styled.div`\n  /* for Layout */\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["title","date","categories","___EmotionJSX","PostHeadInfoWrapper","Title","PostData","join","PostHeadWrapper","PostHeadInfo","MARGIN_BOTTON","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","ScrollSpy","target","refs","sensitivity","this","targets","Array","from","querySelectorAll","window","addEventListener","_this","onScroll","isOnTopOfDoc","deactiveateTarget","_this2","t","findTarget","id","activate","documentElement","scrollTop","offsetTop","a","_this3","deactivate","filter","decodeURIComponent","replace","el","classList","add","remove","contents","headers","h","toc","querySelector","Layout","Contents","edges","data","allMarkdownRemark","href","location","node","tableOfContents","_edges$0$node$frontma","frontmatter","summary","Template","description","url","Post","PostHead","PostContent","TableOfContents","CommentWidget","name","styles"],"sourceRoot":""}